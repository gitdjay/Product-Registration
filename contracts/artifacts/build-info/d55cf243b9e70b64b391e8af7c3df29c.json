{
	"id": "d55cf243b9e70b64b391e8af7c3df29c",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.4.26",
	"solcLongVersion": "0.4.26+commit.4563c3fc",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Production.sol": {
				"content": "pragma solidity ^0.4.17;\r\n\r\ncontract Production {\r\n\r\n     struct Product {\r\n        bytes32[] serialNo;\r\n        bytes32[] registered;\r\n        uint regNo;\r\n    }\r\n\r\n    Product product;\r\n\r\n    function setProduct(string memory a) private {\r\n        bytes32 hash = keccak256(abi.encodePacked(a));\r\n        product.serialNo.push(hash);\r\n\r\n        for (uint i = 1; i<10; i++) {\r\n            bytes32 serial = keccak256(abi.encodePacked(product.serialNo[i-1]));\r\n            product.serialNo.push(serial);\r\n        }\r\n    }\r\n\r\n    function checkSerial(uint n, bytes32 sn) public view returns(bool) {\r\n        if (sn == product.serialNo[n]) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function bytes32ToString(bytes32 _bytes32)  pure returns (string memory) {\r\n        uint8 i = 0;\r\n        while(i < 32 && _bytes32[i] != 0) {\r\n            i++;\r\n        }\r\n        bytes memory bytesArray = new bytes(i);\r\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\r\n            bytesArray[i] = _bytes32[i];\r\n        }\r\n        return string(bytesArray);\r\n    }\r\n\r\n    function regWarranty(uint Num, bytes32 regSer) public {\r\n        if (product.serialNo[Num] == regSer) {\r\n            product.registered.push(regSer);\r\n            product.regNo++;\r\n        }\r\n    }\r\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/Production.sol": {
				"Production": {
					"abi": [
						{
							"constant": false,
							"inputs": [
								{
									"name": "Num",
									"type": "uint256"
								},
								{
									"name": "regSer",
									"type": "bytes32"
								}
							],
							"name": "regWarranty",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"name": "n",
									"type": "uint256"
								},
								{
									"name": "sn",
									"type": "bytes32"
								}
							],
							"name": "checkSerial",
							"outputs": [
								{
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"name": "_bytes32",
									"type": "bytes32"
								}
							],
							"name": "bytes32ToString",
							"outputs": [
								{
									"name": "",
									"type": "string"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"methods": {}
					},
					"evm": {
						"assembly": "    /* \"contracts/Production.sol\":28:1313  contract Production {\r... */\n  mstore(0x40, 0x80)\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x0\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"contracts/Production.sol\":28:1313  contract Production {\r... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x0\n  codecopy\n  0x0\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Production.sol\":28:1313  contract Production {\r... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x4))\n      calldataload(0x0)\n      0x100000000000000000000000000000000000000000000000000000000\n      swap1\n      div\n      0xffffffff\n      and\n      dup1\n      0x4716d27a\n      eq\n      tag_2\n      jumpi\n      dup1\n      0x60eaf1df\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x9201de55\n      eq\n      tag_4\n      jumpi\n    tag_1:\n      0x0\n      dup1\n      revert\n        /* \"contracts/Production.sol\":1113:1310  function regWarranty(uint Num, bytes32 regSer) public {\r... */\n    tag_2:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_5\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x0\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_5:\n        /* \"contracts/Production.sol\":1113:1310  function regWarranty(uint Num, bytes32 regSer) public {\r... */\n      pop\n      tag_6\n      0x4\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      not(0x0)\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      jump(tag_7)\n    tag_6:\n      stop\n        /* \"contracts/Production.sol\":527:726  function checkSerial(uint n, bytes32 sn) public view returns(bool) {\r... */\n    tag_3:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_8\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x0\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_8:\n        /* \"contracts/Production.sol\":527:726  function checkSerial(uint n, bytes32 sn) public view returns(bool) {\r... */\n      pop\n      tag_9\n      0x4\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      not(0x0)\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      jump(tag_10)\n    tag_9:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Production.sol\":734:1105  function bytes32ToString(bytes32 _bytes32)  pure returns (string memory) {\r... */\n    tag_4:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_11\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x0\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_11:\n        /* \"contracts/Production.sol\":734:1105  function bytes32ToString(bytes32 _bytes32)  pure returns (string memory) {\r... */\n      pop\n      tag_12\n      0x4\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      not(0x0)\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      jump(tag_13)\n    tag_12:\n      mload(0x40)\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n        /* \"--CODEGEN--\":23:24   */\n      0x0\n        /* \"--CODEGEN--\":8:108   */\n    tag_14:\n        /* \"--CODEGEN--\":33:36   */\n      dup4\n        /* \"--CODEGEN--\":30:31   */\n      dup2\n        /* \"--CODEGEN--\":27:37   */\n      lt\n        /* \"--CODEGEN--\":8:108   */\n      iszero\n      tag_15\n      jumpi\n        /* \"--CODEGEN--\":99:100   */\n      dup1\n        /* \"--CODEGEN--\":94:97   */\n      dup3\n        /* \"--CODEGEN--\":90:101   */\n      add\n        /* \"--CODEGEN--\":84:102   */\n      mload\n        /* \"--CODEGEN--\":80:81   */\n      dup2\n        /* \"--CODEGEN--\":75:78   */\n      dup5\n        /* \"--CODEGEN--\":71:82   */\n      add\n        /* \"--CODEGEN--\":64:103   */\n      mstore\n        /* \"--CODEGEN--\":52:54   */\n      0x20\n        /* \"--CODEGEN--\":49:50   */\n      dup2\n        /* \"--CODEGEN--\":45:55   */\n      add\n        /* \"--CODEGEN--\":40:55   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":8:108   */\n      jump(tag_14)\n    tag_15:\n        /* \"--CODEGEN--\":12:26   */\n      pop\n        /* \"contracts/Production.sol\":734:1105  function bytes32ToString(bytes32 _bytes32)  pure returns (string memory) {\r... */\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_17\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x1\n      dup4\n      0x20\n      sub\n      0x100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_17:\n      pop\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Production.sol\":1113:1310  function regWarranty(uint Num, bytes32 regSer) public {\r... */\n    tag_7:\n        /* \"contracts/Production.sol\":1207:1213  regSer */\n      dup1\n        /* \"contracts/Production.sol\":1182:1213  product.serialNo[Num] == regSer */\n      not(0x0)\n      and\n        /* \"contracts/Production.sol\":1182:1189  product */\n      0x0\n        /* \"contracts/Production.sol\":1182:1198  product.serialNo */\n      dup1\n      add\n        /* \"contracts/Production.sol\":1199:1202  Num */\n      dup4\n        /* \"contracts/Production.sol\":1182:1203  product.serialNo[Num] */\n      dup2\n      sload\n      dup2\n      lt\n      iszero\n      iszero\n      tag_19\n      jumpi\n      invalid\n    tag_19:\n      swap1\n      0x0\n      mstore\n      keccak256(0x0, 0x20)\n      add\n      sload\n        /* \"contracts/Production.sol\":1182:1213  product.serialNo[Num] == regSer */\n      not(0x0)\n      and\n      eq\n        /* \"contracts/Production.sol\":1178:1303  if (product.serialNo[Num] == regSer) {\r... */\n      iszero\n      tag_21\n      jumpi\n        /* \"contracts/Production.sol\":1230:1237  product */\n      0x0\n        /* \"contracts/Production.sol\":1230:1248  product.registered */\n      0x1\n      add\n        /* \"contracts/Production.sol\":1254:1260  regSer */\n      dup2\n        /* \"contracts/Production.sol\":1230:1261  product.registered.push(regSer) */\n      swap1\n      dup1\n        /* \"--CODEGEN--\":39:40   */\n      0x1\n        /* \"--CODEGEN--\":33:36   */\n      dup2\n        /* \"--CODEGEN--\":27:37   */\n      sload\n        /* \"--CODEGEN--\":23:41   */\n      add\n        /* \"--CODEGEN--\":57:67   */\n      dup1\n        /* \"--CODEGEN--\":52:55   */\n      dup3\n        /* \"--CODEGEN--\":45:68   */\n      sstore\n        /* \"--CODEGEN--\":79:89   */\n      dup1\n        /* \"--CODEGEN--\":72:89   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":0:93   */\n      pop\n        /* \"contracts/Production.sol\":1230:1261  product.registered.push(regSer) */\n      swap1\n      0x1\n      dup3\n      sub\n      swap1\n      0x0\n      mstore\n      keccak256(0x0, 0x20)\n      add\n      0x0\n      swap1\n      swap2\n      swap3\n      swap1\n      swap2\n      swap1\n      swap2\n      pop\n      swap1\n      not(0x0)\n      and\n      swap1\n      sstore\n      pop\n        /* \"contracts/Production.sol\":1276:1283  product */\n      0x0\n        /* \"contracts/Production.sol\":1276:1289  product.regNo */\n      0x2\n      add\n      0x0\n        /* \"contracts/Production.sol\":1276:1291  product.regNo++ */\n      dup2\n      sload\n      dup1\n      swap3\n      swap2\n      swap1\n      0x1\n      add\n      swap2\n      swap1\n      pop\n      sstore\n      pop\n        /* \"contracts/Production.sol\":1178:1303  if (product.serialNo[Num] == regSer) {\r... */\n    tag_21:\n        /* \"contracts/Production.sol\":1113:1310  function regWarranty(uint Num, bytes32 regSer) public {\r... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Production.sol\":527:726  function checkSerial(uint n, bytes32 sn) public view returns(bool) {\r... */\n    tag_10:\n        /* \"contracts/Production.sol\":588:592  bool */\n      0x0\n        /* \"contracts/Production.sol\":615:622  product */\n      dup1\n        /* \"contracts/Production.sol\":615:631  product.serialNo */\n      0x0\n      add\n        /* \"contracts/Production.sol\":632:633  n */\n      dup4\n        /* \"contracts/Production.sol\":615:634  product.serialNo[n] */\n      dup2\n      sload\n      dup2\n      lt\n      iszero\n      iszero\n      tag_24\n      jumpi\n      invalid\n    tag_24:\n      swap1\n      0x0\n      mstore\n      keccak256(0x0, 0x20)\n      add\n      sload\n        /* \"contracts/Production.sol\":609:634  sn == product.serialNo[n] */\n      not(0x0)\n      and\n        /* \"contracts/Production.sol\":609:611  sn */\n      dup3\n        /* \"contracts/Production.sol\":609:634  sn == product.serialNo[n] */\n      not(0x0)\n      and\n      eq\n        /* \"contracts/Production.sol\":605:719  if (sn == product.serialNo[n]) {\r... */\n      iszero\n      tag_26\n      jumpi\n        /* \"contracts/Production.sol\":658:662  true */\n      0x1\n        /* \"contracts/Production.sol\":651:662  return true */\n      swap1\n      pop\n      jump(tag_23)\n        /* \"contracts/Production.sol\":605:719  if (sn == product.serialNo[n]) {\r... */\n    tag_26:\n        /* \"contracts/Production.sol\":702:707  false */\n      0x0\n        /* \"contracts/Production.sol\":695:707  return false */\n      swap1\n      pop\n        /* \"contracts/Production.sol\":527:726  function checkSerial(uint n, bytes32 sn) public view returns(bool) {\r... */\n    tag_23:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Production.sol\":734:1105  function bytes32ToString(bytes32 _bytes32)  pure returns (string memory) {\r... */\n    tag_13:\n        /* \"contracts/Production.sol\":792:798  string */\n      0x60\n        /* \"contracts/Production.sol\":818:825  uint8 i */\n      0x0\n        /* \"contracts/Production.sol\":914:937  bytes memory bytesArray */\n      0x60\n        /* \"contracts/Production.sol\":828:829  0 */\n      0x0\n        /* \"contracts/Production.sol\":818:829  uint8 i = 0 */\n      swap2\n      pop\n        /* \"contracts/Production.sol\":840:904  while(i < 32 && _bytes32[i] != 0) {\r... */\n    tag_29:\n        /* \"contracts/Production.sol\":850:852  32 */\n      0x20\n        /* \"contracts/Production.sol\":846:847  i */\n      dup3\n        /* \"contracts/Production.sol\":846:852  i < 32 */\n      0xff\n      and\n      lt\n        /* \"contracts/Production.sol\":846:872  i < 32 && _bytes32[i] != 0 */\n      dup1\n      iszero\n      tag_31\n      jumpi\n      pop\n        /* \"contracts/Production.sol\":871:872  0 */\n      0x0\n        /* \"contracts/Production.sol\":856:872  _bytes32[i] != 0 */\n      0x100000000000000000000000000000000000000000000000000000000000000\n      mul\n        /* \"contracts/Production.sol\":856:864  _bytes32 */\n      dup5\n        /* \"contracts/Production.sol\":865:866  i */\n      dup4\n        /* \"contracts/Production.sol\":856:867  _bytes32[i] */\n      0xff\n      and\n      0x20\n      dup2\n      lt\n      iszero\n      iszero\n      tag_32\n      jumpi\n      invalid\n    tag_32:\n      byte\n      0x100000000000000000000000000000000000000000000000000000000000000\n      mul\n        /* \"contracts/Production.sol\":856:872  _bytes32[i] != 0 */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n      iszero\n        /* \"contracts/Production.sol\":846:872  i < 32 && _bytes32[i] != 0 */\n    tag_31:\n        /* \"contracts/Production.sol\":840:904  while(i < 32 && _bytes32[i] != 0) {\r... */\n      iszero\n      tag_30\n      jumpi\n        /* \"contracts/Production.sol\":889:892  i++ */\n      dup2\n      dup1\n      0x1\n      add\n      swap3\n      pop\n      pop\n        /* \"contracts/Production.sol\":840:904  while(i < 32 && _bytes32[i] != 0) {\r... */\n      jump(tag_29)\n    tag_30:\n        /* \"contracts/Production.sol\":950:951  i */\n      dup2\n        /* \"contracts/Production.sol\":940:952  new bytes(i) */\n      0xff\n      and\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_33\n      jumpi\n      dup2\n      0x20\n      add\n        /* \"--CODEGEN--\":29:31   */\n      0x20\n        /* \"--CODEGEN--\":21:27   */\n      dup3\n        /* \"--CODEGEN--\":17:32   */\n      mul\n        /* \"--CODEGEN--\":117:121   */\n      dup1\n        /* \"--CODEGEN--\":105:115   */\n      codesize\n        /* \"--CODEGEN--\":97:103   */\n      dup4\n        /* \"--CODEGEN--\":88:122   */\n      codecopy\n        /* \"--CODEGEN--\":148:152   */\n      dup1\n        /* \"--CODEGEN--\":140:146   */\n      dup3\n        /* \"--CODEGEN--\":136:153   */\n      add\n        /* \"--CODEGEN--\":126:153   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":0:157   */\n      pop\n        /* \"contracts/Production.sol\":940:952  new bytes(i) */\n      swap1\n      pop\n    tag_33:\n      pop\n        /* \"contracts/Production.sol\":914:952  bytes memory bytesArray = new bytes(i) */\n      swap1\n      pop\n        /* \"contracts/Production.sol\":972:973  0 */\n      0x0\n        /* \"contracts/Production.sol\":968:973  i = 0 */\n      swap2\n      pop\n        /* \"contracts/Production.sol\":963:1062  for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\r... */\n    tag_34:\n        /* \"contracts/Production.sol\":979:981  32 */\n      0x20\n        /* \"contracts/Production.sol\":975:976  i */\n      dup3\n        /* \"contracts/Production.sol\":975:981  i < 32 */\n      0xff\n      and\n      lt\n        /* \"contracts/Production.sol\":975:1001  i < 32 && _bytes32[i] != 0 */\n      dup1\n      iszero\n      tag_37\n      jumpi\n      pop\n        /* \"contracts/Production.sol\":1000:1001  0 */\n      0x0\n        /* \"contracts/Production.sol\":985:1001  _bytes32[i] != 0 */\n      0x100000000000000000000000000000000000000000000000000000000000000\n      mul\n        /* \"contracts/Production.sol\":985:993  _bytes32 */\n      dup5\n        /* \"contracts/Production.sol\":994:995  i */\n      dup4\n        /* \"contracts/Production.sol\":985:996  _bytes32[i] */\n      0xff\n      and\n      0x20\n      dup2\n      lt\n      iszero\n      iszero\n      tag_38\n      jumpi\n      invalid\n    tag_38:\n      byte\n      0x100000000000000000000000000000000000000000000000000000000000000\n      mul\n        /* \"contracts/Production.sol\":985:1001  _bytes32[i] != 0 */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n      iszero\n        /* \"contracts/Production.sol\":975:1001  i < 32 && _bytes32[i] != 0 */\n    tag_37:\n        /* \"contracts/Production.sol\":963:1062  for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\r... */\n      iszero\n      tag_35\n      jumpi\n        /* \"contracts/Production.sol\":1039:1047  _bytes32 */\n      dup4\n        /* \"contracts/Production.sol\":1048:1049  i */\n      dup3\n        /* \"contracts/Production.sol\":1039:1050  _bytes32[i] */\n      0xff\n      and\n      0x20\n      dup2\n      lt\n      iszero\n      iszero\n      tag_39\n      jumpi\n      invalid\n    tag_39:\n      byte\n      0x100000000000000000000000000000000000000000000000000000000000000\n      mul\n        /* \"contracts/Production.sol\":1023:1033  bytesArray */\n      dup2\n        /* \"contracts/Production.sol\":1034:1035  i */\n      dup4\n        /* \"contracts/Production.sol\":1023:1036  bytesArray[i] */\n      0xff\n      and\n      dup2\n      mload\n      dup2\n      lt\n      iszero\n      iszero\n      tag_40\n      jumpi\n      invalid\n    tag_40:\n      swap1\n      0x20\n      add\n      add\n        /* \"contracts/Production.sol\":1023:1050  bytesArray[i] = _bytes32[i] */\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      swap1\n      dup2\n      0x0\n      byte\n      swap1\n      mstore8\n      pop\n        /* \"contracts/Production.sol\":1003:1006  i++ */\n      dup2\n      dup1\n      0x1\n      add\n      swap3\n      pop\n      pop\n        /* \"contracts/Production.sol\":963:1062  for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\r... */\n      jump(tag_34)\n    tag_35:\n        /* \"contracts/Production.sol\":1086:1096  bytesArray */\n      dup1\n        /* \"contracts/Production.sol\":1072:1097  return string(bytesArray) */\n      swap3\n      pop\n        /* \"contracts/Production.sol\":734:1105  function bytes32ToString(bytes32 _bytes32)  pure returns (string memory) {\r... */\n      pop\n      pop\n      swap2\n      swap1\n      pop\n      jump\t// out\n\n    auxdata: 0xa165627a7a72305820bbbcd0e29c34fc24aa3333840b798bca87931666fc4ac3186d77c955968393580029\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5061047d806100206000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634716d27a1461005c57806360eaf1df146100975780639201de55146100ea575b600080fd5b34801561006857600080fd5b50610095600480360381019080803590602001909291908035600019169060200190929190505050610194565b005b3480156100a357600080fd5b506100d060048036038101908080359060200190929190803560001916906020019092919050505061020e565b604051808215151515815260200191505060405180910390f35b3480156100f657600080fd5b50610119600480360381019080803560001916906020019092919050505061024f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561015957808201518184015260208101905061013e565b50505050905090810190601f1680156101865780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b806000191660008001838154811015156101aa57fe5b906000526020600020015460001916141561020a5760006001018190806001815401808255809150509060018203906000526020600020016000909192909190915090600019169055506000600201600081548092919060010191905055505b5050565b6000806000018381548110151561022157fe5b906000526020600020015460001916826000191614156102445760019050610249565b600090505b92915050565b606060006060600091505b60208260ff161080156102e5575060007f010000000000000000000000000000000000000000000000000000000000000002848360ff1660208110151561029d57fe5b1a7f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b156102f757818060010192505061025a565b8160ff166040519080825280601f01601f19166020018201604052801561032d5781602001602082028038833980820191505090505b509050600091505b60208260ff161080156103c0575060007f010000000000000000000000000000000000000000000000000000000000000002848360ff1660208110151561037857fe5b1a7f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b1561044757838260ff166020811015156103d657fe5b1a7f010000000000000000000000000000000000000000000000000000000000000002818360ff1681518110151561040a57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508180600101925050610335565b80925050509190505600a165627a7a72305820bbbcd0e29c34fc24aa3333840b798bca87931666fc4ac3186d77c955968393580029",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x47D DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP1 PUSH4 0x4716D27A EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x60EAF1DF EQ PUSH2 0x97 JUMPI DUP1 PUSH4 0x9201DE55 EQ PUSH2 0xEA JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x95 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH1 0x0 NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x194 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH1 0x0 NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x20E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x119 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH1 0x0 NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x24F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x159 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x13E JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x186 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP1 PUSH1 0x0 NOT AND PUSH1 0x0 DUP1 ADD DUP4 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1AA JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0x0 NOT AND EQ ISZERO PUSH2 0x20A JUMPI PUSH1 0x0 PUSH1 0x1 ADD DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP SWAP1 PUSH1 0x1 DUP3 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 SWAP2 POP SWAP1 PUSH1 0x0 NOT AND SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x2 ADD PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 ADD SWAP2 SWAP1 POP SSTORE POP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 ADD DUP4 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x221 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0x0 NOT AND DUP3 PUSH1 0x0 NOT AND EQ ISZERO PUSH2 0x244 JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x249 JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 PUSH1 0xFF AND LT DUP1 ISZERO PUSH2 0x2E5 JUMPI POP PUSH1 0x0 PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL DUP5 DUP4 PUSH1 0xFF AND PUSH1 0x20 DUP2 LT ISZERO ISZERO PUSH2 0x29D JUMPI INVALID JUMPDEST BYTE PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x2F7 JUMPI DUP2 DUP1 PUSH1 0x1 ADD SWAP3 POP POP PUSH2 0x25A JUMP JUMPDEST DUP2 PUSH1 0xFF AND PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x32D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 PUSH1 0xFF AND LT DUP1 ISZERO PUSH2 0x3C0 JUMPI POP PUSH1 0x0 PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL DUP5 DUP4 PUSH1 0xFF AND PUSH1 0x20 DUP2 LT ISZERO ISZERO PUSH2 0x378 JUMPI INVALID JUMPDEST BYTE PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x447 JUMPI DUP4 DUP3 PUSH1 0xFF AND PUSH1 0x20 DUP2 LT ISZERO ISZERO PUSH2 0x3D6 JUMPI INVALID JUMPDEST BYTE PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL DUP2 DUP4 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x40A JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 DUP1 PUSH1 0x1 ADD SWAP3 POP POP PUSH2 0x335 JUMP JUMPDEST DUP1 SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0xbb 0xbc 0xd0 0xe2 SWAP13 CALLVALUE 0xfc 0x24 0xaa CALLER CALLER DUP5 SIGNEXTEND PUSH26 0x8BCA87931666FC4AC3186D77C955968393580029000000000000 ",
							"sourceMap": "28:1285:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;28:1285:0;;;;;;;"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634716d27a1461005c57806360eaf1df146100975780639201de55146100ea575b600080fd5b34801561006857600080fd5b50610095600480360381019080803590602001909291908035600019169060200190929190505050610194565b005b3480156100a357600080fd5b506100d060048036038101908080359060200190929190803560001916906020019092919050505061020e565b604051808215151515815260200191505060405180910390f35b3480156100f657600080fd5b50610119600480360381019080803560001916906020019092919050505061024f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561015957808201518184015260208101905061013e565b50505050905090810190601f1680156101865780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b806000191660008001838154811015156101aa57fe5b906000526020600020015460001916141561020a5760006001018190806001815401808255809150509060018203906000526020600020016000909192909190915090600019169055506000600201600081548092919060010191905055505b5050565b6000806000018381548110151561022157fe5b906000526020600020015460001916826000191614156102445760019050610249565b600090505b92915050565b606060006060600091505b60208260ff161080156102e5575060007f010000000000000000000000000000000000000000000000000000000000000002848360ff1660208110151561029d57fe5b1a7f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b156102f757818060010192505061025a565b8160ff166040519080825280601f01601f19166020018201604052801561032d5781602001602082028038833980820191505090505b509050600091505b60208260ff161080156103c0575060007f010000000000000000000000000000000000000000000000000000000000000002848360ff1660208110151561037857fe5b1a7f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b1561044757838260ff166020811015156103d657fe5b1a7f010000000000000000000000000000000000000000000000000000000000000002818360ff1681518110151561040a57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508180600101925050610335565b80925050509190505600a165627a7a72305820bbbcd0e29c34fc24aa3333840b798bca87931666fc4ac3186d77c955968393580029",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP1 PUSH4 0x4716D27A EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x60EAF1DF EQ PUSH2 0x97 JUMPI DUP1 PUSH4 0x9201DE55 EQ PUSH2 0xEA JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x95 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH1 0x0 NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x194 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH1 0x0 NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x20E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x119 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH1 0x0 NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x24F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x159 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x13E JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x186 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP1 PUSH1 0x0 NOT AND PUSH1 0x0 DUP1 ADD DUP4 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1AA JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0x0 NOT AND EQ ISZERO PUSH2 0x20A JUMPI PUSH1 0x0 PUSH1 0x1 ADD DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP SWAP1 PUSH1 0x1 DUP3 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 SWAP2 POP SWAP1 PUSH1 0x0 NOT AND SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x2 ADD PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 ADD SWAP2 SWAP1 POP SSTORE POP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 ADD DUP4 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x221 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0x0 NOT AND DUP3 PUSH1 0x0 NOT AND EQ ISZERO PUSH2 0x244 JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x249 JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 PUSH1 0xFF AND LT DUP1 ISZERO PUSH2 0x2E5 JUMPI POP PUSH1 0x0 PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL DUP5 DUP4 PUSH1 0xFF AND PUSH1 0x20 DUP2 LT ISZERO ISZERO PUSH2 0x29D JUMPI INVALID JUMPDEST BYTE PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x2F7 JUMPI DUP2 DUP1 PUSH1 0x1 ADD SWAP3 POP POP PUSH2 0x25A JUMP JUMPDEST DUP2 PUSH1 0xFF AND PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x32D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 PUSH1 0xFF AND LT DUP1 ISZERO PUSH2 0x3C0 JUMPI POP PUSH1 0x0 PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL DUP5 DUP4 PUSH1 0xFF AND PUSH1 0x20 DUP2 LT ISZERO ISZERO PUSH2 0x378 JUMPI INVALID JUMPDEST BYTE PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x447 JUMPI DUP4 DUP3 PUSH1 0xFF AND PUSH1 0x20 DUP2 LT ISZERO ISZERO PUSH2 0x3D6 JUMPI INVALID JUMPDEST BYTE PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL DUP2 DUP4 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x40A JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 DUP1 PUSH1 0x1 ADD SWAP3 POP POP PUSH2 0x335 JUMP JUMPDEST DUP1 SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0xbb 0xbc 0xd0 0xe2 SWAP13 CALLVALUE 0xfc 0x24 0xaa CALLER CALLER DUP5 SIGNEXTEND PUSH26 0x8BCA87931666FC4AC3186D77C955968393580029000000000000 ",
							"sourceMap": "28:1285:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1113:197;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1113:197:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;527:199;;8:9:-1;5:2;;;30:1;27;20:12;5:2;527:199:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;734:371;;8:9:-1;5:2;;;30:1;27;20:12;5:2;734:371:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;734:371:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1113:197;1207:6;1182:31;;;:7;:16;;1199:3;1182:21;;;;;;;;;;;;;;;;;;:31;;;;1178:125;;;1230:7;:18;;1254:6;1230:31;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;1230:31:0;;;;;;;;;;;;;;;;;;;;;;;;;;;1276:7;:13;;;:15;;;;;;;;;;;;;1178:125;1113:197;;:::o;527:199::-;588:4;615:7;:16;;632:1;615:19;;;;;;;;;;;;;;;;;;609:25;;;:2;:25;;;;605:114;;;658:4;651:11;;;;605:114;702:5;695:12;;527:199;;;;;:::o;734:371::-;792:6;818:7;914:23;828:1;818:11;;840:64;850:2;846:1;:6;;;:26;;;;;871:1;856:16;;:8;865:1;856:11;;;;;;;;;;;;;;:16;;;;;846:26;840:64;;;889:3;;;;;;;840:64;;;950:1;940:12;;;;;;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;940:12:0;;;;914:38;;972:1;968:5;;963:99;979:2;975:1;:6;;;:26;;;;;1000:1;985:16;;:8;994:1;985:11;;;;;;;;;;;;;;:16;;;;;975:26;963:99;;;1039:8;1048:1;1039:11;;;;;;;;;;;;;;1023:10;1034:1;1023:13;;;;;;;;;;;;;;;;:27;;;;;;;;;;;1003:3;;;;;;;963:99;;;1086:10;1072:25;;734:371;;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "229800",
								"executionCost": "269",
								"totalCost": "230069"
							},
							"external": {
								"bytes32ToString(bytes32)": "infinite",
								"checkSerial(uint256,bytes32)": "882",
								"regWarranty(uint256,bytes32)": "61360"
							},
							"internal": {
								"setProduct(string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 28,
									"end": 1313,
									"name": "PUSH",
									"value": "80"
								},
								{
									"begin": 28,
									"end": 1313,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 28,
									"end": 1313,
									"name": "MSTORE"
								},
								{
									"begin": 28,
									"end": 1313,
									"name": "CALLVALUE"
								},
								{
									"begin": 8,
									"end": 17,
									"name": "DUP1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "ISZERO"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPI"
								},
								{
									"begin": 30,
									"end": 31,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 27,
									"end": 28,
									"name": "DUP1"
								},
								{
									"begin": 20,
									"end": 32,
									"name": "REVERT"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPDEST"
								},
								{
									"begin": 28,
									"end": 1313,
									"name": "POP"
								},
								{
									"begin": 28,
									"end": 1313,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 28,
									"end": 1313,
									"name": "DUP1"
								},
								{
									"begin": 28,
									"end": 1313,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 28,
									"end": 1313,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 28,
									"end": 1313,
									"name": "CODECOPY"
								},
								{
									"begin": 28,
									"end": 1313,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 28,
									"end": 1313,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a165627a7a72305820bbbcd0e29c34fc24aa3333840b798bca87931666fc4ac3186d77c955968393580029",
									".code": [
										{
											"begin": 28,
											"end": 1313,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "MSTORE"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "LT"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "PUSH [tag]",
											"value": "1"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "JUMPI"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "PUSH",
											"value": "100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "SWAP1"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "DIV"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "AND"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "DUP1"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "PUSH",
											"value": "4716D27A"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "EQ"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "JUMPI"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "DUP1"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "PUSH",
											"value": "60EAF1DF"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "EQ"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "PUSH [tag]",
											"value": "3"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "JUMPI"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "DUP1"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "PUSH",
											"value": "9201DE55"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "EQ"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "PUSH [tag]",
											"value": "4"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "JUMPI"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "tag",
											"value": "1"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "JUMPDEST"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "DUP1"
										},
										{
											"begin": 28,
											"end": 1313,
											"name": "REVERT"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "tag",
											"value": "2"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "JUMPDEST"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "5"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "5"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "POP"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "PUSH [tag]",
											"value": "6"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "DUP1"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "SUB"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "DUP2"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "ADD"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "SWAP1"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "DUP1"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "DUP1"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "SWAP1"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "ADD"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "SWAP1"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "SWAP3"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "SWAP2"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "SWAP1"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "DUP1"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "NOT"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "AND"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "SWAP1"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "ADD"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "SWAP1"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "SWAP3"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "SWAP2"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "SWAP1"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "POP"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "POP"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "POP"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "PUSH [tag]",
											"value": "7"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "JUMP"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "tag",
											"value": "6"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "JUMPDEST"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "STOP"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "tag",
											"value": "3"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "JUMPDEST"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "8"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "8"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "POP"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "PUSH [tag]",
											"value": "9"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "DUP1"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "SUB"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "DUP2"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "ADD"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "SWAP1"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "DUP1"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "DUP1"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "SWAP1"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "ADD"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "SWAP1"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "SWAP3"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "SWAP2"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "SWAP1"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "DUP1"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "NOT"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "AND"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "SWAP1"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "ADD"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "SWAP1"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "SWAP3"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "SWAP2"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "SWAP1"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "POP"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "POP"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "POP"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "PUSH [tag]",
											"value": "10"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "JUMP"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "tag",
											"value": "9"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "JUMPDEST"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "MLOAD"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "DUP1"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "DUP3"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "ISZERO"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "ISZERO"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "ISZERO"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "ISZERO"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "DUP2"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "MSTORE"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "ADD"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "SWAP2"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "POP"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "POP"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "MLOAD"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "DUP1"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "SWAP2"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "SUB"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "SWAP1"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "RETURN"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "tag",
											"value": "4"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "JUMPDEST"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "11"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "11"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "POP"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "PUSH [tag]",
											"value": "12"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "DUP1"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "SUB"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "DUP2"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "ADD"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "SWAP1"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "DUP1"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "DUP1"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "NOT"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "AND"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "SWAP1"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "ADD"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "SWAP1"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "SWAP3"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "SWAP2"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "SWAP1"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "POP"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "POP"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "POP"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "PUSH [tag]",
											"value": "13"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "JUMP"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "tag",
											"value": "12"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "JUMPDEST"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "MLOAD"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "DUP1"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "DUP1"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "ADD"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "DUP3"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "DUP2"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "SUB"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "DUP3"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "MSTORE"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "DUP4"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "DUP2"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "DUP2"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "MLOAD"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "DUP2"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "MSTORE"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "ADD"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "SWAP2"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "POP"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "DUP1"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "MLOAD"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "SWAP1"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "ADD"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "SWAP1"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "DUP1"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "DUP4"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "DUP4"
										},
										{
											"begin": 23,
											"end": 24,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "tag",
											"value": "14"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPDEST"
										},
										{
											"begin": 33,
											"end": 36,
											"name": "DUP4"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "DUP2"
										},
										{
											"begin": 27,
											"end": 37,
											"name": "LT"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "PUSH [tag]",
											"value": "15"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPI"
										},
										{
											"begin": 99,
											"end": 100,
											"name": "DUP1"
										},
										{
											"begin": 94,
											"end": 97,
											"name": "DUP3"
										},
										{
											"begin": 90,
											"end": 101,
											"name": "ADD"
										},
										{
											"begin": 84,
											"end": 102,
											"name": "MLOAD"
										},
										{
											"begin": 80,
											"end": 81,
											"name": "DUP2"
										},
										{
											"begin": 75,
											"end": 78,
											"name": "DUP5"
										},
										{
											"begin": 71,
											"end": 82,
											"name": "ADD"
										},
										{
											"begin": 64,
											"end": 103,
											"name": "MSTORE"
										},
										{
											"begin": 52,
											"end": 54,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 49,
											"end": 50,
											"name": "DUP2"
										},
										{
											"begin": 45,
											"end": 55,
											"name": "ADD"
										},
										{
											"begin": 40,
											"end": 55,
											"name": "SWAP1"
										},
										{
											"begin": 40,
											"end": 55,
											"name": "POP"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "PUSH [tag]",
											"value": "14"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMP"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "tag",
											"value": "15"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPDEST"
										},
										{
											"begin": 12,
											"end": 26,
											"name": "POP"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "POP"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "POP"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "POP"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "SWAP1"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "POP"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "SWAP1"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "DUP2"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "ADD"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "SWAP1"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "AND"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "DUP1"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "ISZERO"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "PUSH [tag]",
											"value": "17"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "JUMPI"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "DUP1"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "DUP3"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "SUB"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "DUP1"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "MLOAD"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "DUP4"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "SUB"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "EXP"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "SUB"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "NOT"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "AND"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "DUP2"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "MSTORE"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "ADD"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "SWAP2"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "POP"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "tag",
											"value": "17"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "JUMPDEST"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "POP"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "SWAP3"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "POP"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "POP"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "POP"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "MLOAD"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "DUP1"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "SWAP2"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "SUB"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "SWAP1"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "RETURN"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "tag",
											"value": "7"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "JUMPDEST"
										},
										{
											"begin": 1207,
											"end": 1213,
											"name": "DUP1"
										},
										{
											"begin": 1182,
											"end": 1213,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1182,
											"end": 1213,
											"name": "NOT"
										},
										{
											"begin": 1182,
											"end": 1213,
											"name": "AND"
										},
										{
											"begin": 1182,
											"end": 1189,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1182,
											"end": 1198,
											"name": "DUP1"
										},
										{
											"begin": 1182,
											"end": 1198,
											"name": "ADD"
										},
										{
											"begin": 1199,
											"end": 1202,
											"name": "DUP4"
										},
										{
											"begin": 1182,
											"end": 1203,
											"name": "DUP2"
										},
										{
											"begin": 1182,
											"end": 1203,
											"name": "SLOAD"
										},
										{
											"begin": 1182,
											"end": 1203,
											"name": "DUP2"
										},
										{
											"begin": 1182,
											"end": 1203,
											"name": "LT"
										},
										{
											"begin": 1182,
											"end": 1203,
											"name": "ISZERO"
										},
										{
											"begin": 1182,
											"end": 1203,
											"name": "ISZERO"
										},
										{
											"begin": 1182,
											"end": 1203,
											"name": "PUSH [tag]",
											"value": "19"
										},
										{
											"begin": 1182,
											"end": 1203,
											"name": "JUMPI"
										},
										{
											"begin": 1182,
											"end": 1203,
											"name": "INVALID"
										},
										{
											"begin": 1182,
											"end": 1203,
											"name": "tag",
											"value": "19"
										},
										{
											"begin": 1182,
											"end": 1203,
											"name": "JUMPDEST"
										},
										{
											"begin": 1182,
											"end": 1203,
											"name": "SWAP1"
										},
										{
											"begin": 1182,
											"end": 1203,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1182,
											"end": 1203,
											"name": "MSTORE"
										},
										{
											"begin": 1182,
											"end": 1203,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1182,
											"end": 1203,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1182,
											"end": 1203,
											"name": "KECCAK256"
										},
										{
											"begin": 1182,
											"end": 1203,
											"name": "ADD"
										},
										{
											"begin": 1182,
											"end": 1203,
											"name": "SLOAD"
										},
										{
											"begin": 1182,
											"end": 1213,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1182,
											"end": 1213,
											"name": "NOT"
										},
										{
											"begin": 1182,
											"end": 1213,
											"name": "AND"
										},
										{
											"begin": 1182,
											"end": 1213,
											"name": "EQ"
										},
										{
											"begin": 1178,
											"end": 1303,
											"name": "ISZERO"
										},
										{
											"begin": 1178,
											"end": 1303,
											"name": "PUSH [tag]",
											"value": "21"
										},
										{
											"begin": 1178,
											"end": 1303,
											"name": "JUMPI"
										},
										{
											"begin": 1230,
											"end": 1237,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1230,
											"end": 1248,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1230,
											"end": 1248,
											"name": "ADD"
										},
										{
											"begin": 1254,
											"end": 1260,
											"name": "DUP2"
										},
										{
											"begin": 1230,
											"end": 1261,
											"name": "SWAP1"
										},
										{
											"begin": 1230,
											"end": 1261,
											"name": "DUP1"
										},
										{
											"begin": 39,
											"end": 40,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 33,
											"end": 36,
											"name": "DUP2"
										},
										{
											"begin": 27,
											"end": 37,
											"name": "SLOAD"
										},
										{
											"begin": 23,
											"end": 41,
											"name": "ADD"
										},
										{
											"begin": 57,
											"end": 67,
											"name": "DUP1"
										},
										{
											"begin": 52,
											"end": 55,
											"name": "DUP3"
										},
										{
											"begin": 45,
											"end": 68,
											"name": "SSTORE"
										},
										{
											"begin": 79,
											"end": 89,
											"name": "DUP1"
										},
										{
											"begin": 72,
											"end": 89,
											"name": "SWAP2"
										},
										{
											"begin": 72,
											"end": 89,
											"name": "POP"
										},
										{
											"begin": 0,
											"end": 93,
											"name": "POP"
										},
										{
											"begin": 1230,
											"end": 1261,
											"name": "SWAP1"
										},
										{
											"begin": 1230,
											"end": 1261,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1230,
											"end": 1261,
											"name": "DUP3"
										},
										{
											"begin": 1230,
											"end": 1261,
											"name": "SUB"
										},
										{
											"begin": 1230,
											"end": 1261,
											"name": "SWAP1"
										},
										{
											"begin": 1230,
											"end": 1261,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1230,
											"end": 1261,
											"name": "MSTORE"
										},
										{
											"begin": 1230,
											"end": 1261,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1230,
											"end": 1261,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1230,
											"end": 1261,
											"name": "KECCAK256"
										},
										{
											"begin": 1230,
											"end": 1261,
											"name": "ADD"
										},
										{
											"begin": 1230,
											"end": 1261,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1230,
											"end": 1261,
											"name": "SWAP1"
										},
										{
											"begin": 1230,
											"end": 1261,
											"name": "SWAP2"
										},
										{
											"begin": 1230,
											"end": 1261,
											"name": "SWAP3"
										},
										{
											"begin": 1230,
											"end": 1261,
											"name": "SWAP1"
										},
										{
											"begin": 1230,
											"end": 1261,
											"name": "SWAP2"
										},
										{
											"begin": 1230,
											"end": 1261,
											"name": "SWAP1"
										},
										{
											"begin": 1230,
											"end": 1261,
											"name": "SWAP2"
										},
										{
											"begin": 1230,
											"end": 1261,
											"name": "POP"
										},
										{
											"begin": 1230,
											"end": 1261,
											"name": "SWAP1"
										},
										{
											"begin": 1230,
											"end": 1261,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1230,
											"end": 1261,
											"name": "NOT"
										},
										{
											"begin": 1230,
											"end": 1261,
											"name": "AND"
										},
										{
											"begin": 1230,
											"end": 1261,
											"name": "SWAP1"
										},
										{
											"begin": 1230,
											"end": 1261,
											"name": "SSTORE"
										},
										{
											"begin": 1230,
											"end": 1261,
											"name": "POP"
										},
										{
											"begin": 1276,
											"end": 1283,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1276,
											"end": 1289,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 1276,
											"end": 1289,
											"name": "ADD"
										},
										{
											"begin": 1276,
											"end": 1289,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1276,
											"end": 1291,
											"name": "DUP2"
										},
										{
											"begin": 1276,
											"end": 1291,
											"name": "SLOAD"
										},
										{
											"begin": 1276,
											"end": 1291,
											"name": "DUP1"
										},
										{
											"begin": 1276,
											"end": 1291,
											"name": "SWAP3"
										},
										{
											"begin": 1276,
											"end": 1291,
											"name": "SWAP2"
										},
										{
											"begin": 1276,
											"end": 1291,
											"name": "SWAP1"
										},
										{
											"begin": 1276,
											"end": 1291,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1276,
											"end": 1291,
											"name": "ADD"
										},
										{
											"begin": 1276,
											"end": 1291,
											"name": "SWAP2"
										},
										{
											"begin": 1276,
											"end": 1291,
											"name": "SWAP1"
										},
										{
											"begin": 1276,
											"end": 1291,
											"name": "POP"
										},
										{
											"begin": 1276,
											"end": 1291,
											"name": "SSTORE"
										},
										{
											"begin": 1276,
											"end": 1291,
											"name": "POP"
										},
										{
											"begin": 1178,
											"end": 1303,
											"name": "tag",
											"value": "21"
										},
										{
											"begin": 1178,
											"end": 1303,
											"name": "JUMPDEST"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "POP"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "POP"
										},
										{
											"begin": 1113,
											"end": 1310,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "tag",
											"value": "10"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "JUMPDEST"
										},
										{
											"begin": 588,
											"end": 592,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 615,
											"end": 622,
											"name": "DUP1"
										},
										{
											"begin": 615,
											"end": 631,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 615,
											"end": 631,
											"name": "ADD"
										},
										{
											"begin": 632,
											"end": 633,
											"name": "DUP4"
										},
										{
											"begin": 615,
											"end": 634,
											"name": "DUP2"
										},
										{
											"begin": 615,
											"end": 634,
											"name": "SLOAD"
										},
										{
											"begin": 615,
											"end": 634,
											"name": "DUP2"
										},
										{
											"begin": 615,
											"end": 634,
											"name": "LT"
										},
										{
											"begin": 615,
											"end": 634,
											"name": "ISZERO"
										},
										{
											"begin": 615,
											"end": 634,
											"name": "ISZERO"
										},
										{
											"begin": 615,
											"end": 634,
											"name": "PUSH [tag]",
											"value": "24"
										},
										{
											"begin": 615,
											"end": 634,
											"name": "JUMPI"
										},
										{
											"begin": 615,
											"end": 634,
											"name": "INVALID"
										},
										{
											"begin": 615,
											"end": 634,
											"name": "tag",
											"value": "24"
										},
										{
											"begin": 615,
											"end": 634,
											"name": "JUMPDEST"
										},
										{
											"begin": 615,
											"end": 634,
											"name": "SWAP1"
										},
										{
											"begin": 615,
											"end": 634,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 615,
											"end": 634,
											"name": "MSTORE"
										},
										{
											"begin": 615,
											"end": 634,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 615,
											"end": 634,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 615,
											"end": 634,
											"name": "KECCAK256"
										},
										{
											"begin": 615,
											"end": 634,
											"name": "ADD"
										},
										{
											"begin": 615,
											"end": 634,
											"name": "SLOAD"
										},
										{
											"begin": 609,
											"end": 634,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 609,
											"end": 634,
											"name": "NOT"
										},
										{
											"begin": 609,
											"end": 634,
											"name": "AND"
										},
										{
											"begin": 609,
											"end": 611,
											"name": "DUP3"
										},
										{
											"begin": 609,
											"end": 634,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 609,
											"end": 634,
											"name": "NOT"
										},
										{
											"begin": 609,
											"end": 634,
											"name": "AND"
										},
										{
											"begin": 609,
											"end": 634,
											"name": "EQ"
										},
										{
											"begin": 605,
											"end": 719,
											"name": "ISZERO"
										},
										{
											"begin": 605,
											"end": 719,
											"name": "PUSH [tag]",
											"value": "26"
										},
										{
											"begin": 605,
											"end": 719,
											"name": "JUMPI"
										},
										{
											"begin": 658,
											"end": 662,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 651,
											"end": 662,
											"name": "SWAP1"
										},
										{
											"begin": 651,
											"end": 662,
											"name": "POP"
										},
										{
											"begin": 651,
											"end": 662,
											"name": "PUSH [tag]",
											"value": "23"
										},
										{
											"begin": 651,
											"end": 662,
											"name": "JUMP"
										},
										{
											"begin": 605,
											"end": 719,
											"name": "tag",
											"value": "26"
										},
										{
											"begin": 605,
											"end": 719,
											"name": "JUMPDEST"
										},
										{
											"begin": 702,
											"end": 707,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 695,
											"end": 707,
											"name": "SWAP1"
										},
										{
											"begin": 695,
											"end": 707,
											"name": "POP"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "tag",
											"value": "23"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "JUMPDEST"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "SWAP3"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "SWAP2"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "POP"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "POP"
										},
										{
											"begin": 527,
											"end": 726,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "tag",
											"value": "13"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "JUMPDEST"
										},
										{
											"begin": 792,
											"end": 798,
											"name": "PUSH",
											"value": "60"
										},
										{
											"begin": 818,
											"end": 825,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 914,
											"end": 937,
											"name": "PUSH",
											"value": "60"
										},
										{
											"begin": 828,
											"end": 829,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 818,
											"end": 829,
											"name": "SWAP2"
										},
										{
											"begin": 818,
											"end": 829,
											"name": "POP"
										},
										{
											"begin": 840,
											"end": 904,
											"name": "tag",
											"value": "29"
										},
										{
											"begin": 840,
											"end": 904,
											"name": "JUMPDEST"
										},
										{
											"begin": 850,
											"end": 852,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 846,
											"end": 847,
											"name": "DUP3"
										},
										{
											"begin": 846,
											"end": 852,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 846,
											"end": 852,
											"name": "AND"
										},
										{
											"begin": 846,
											"end": 852,
											"name": "LT"
										},
										{
											"begin": 846,
											"end": 872,
											"name": "DUP1"
										},
										{
											"begin": 846,
											"end": 872,
											"name": "ISZERO"
										},
										{
											"begin": 846,
											"end": 872,
											"name": "PUSH [tag]",
											"value": "31"
										},
										{
											"begin": 846,
											"end": 872,
											"name": "JUMPI"
										},
										{
											"begin": 846,
											"end": 872,
											"name": "POP"
										},
										{
											"begin": 871,
											"end": 872,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 856,
											"end": 872,
											"name": "PUSH",
											"value": "100000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 856,
											"end": 872,
											"name": "MUL"
										},
										{
											"begin": 856,
											"end": 864,
											"name": "DUP5"
										},
										{
											"begin": 865,
											"end": 866,
											"name": "DUP4"
										},
										{
											"begin": 856,
											"end": 867,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 856,
											"end": 867,
											"name": "AND"
										},
										{
											"begin": 856,
											"end": 867,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 856,
											"end": 867,
											"name": "DUP2"
										},
										{
											"begin": 856,
											"end": 867,
											"name": "LT"
										},
										{
											"begin": 856,
											"end": 867,
											"name": "ISZERO"
										},
										{
											"begin": 856,
											"end": 867,
											"name": "ISZERO"
										},
										{
											"begin": 856,
											"end": 867,
											"name": "PUSH [tag]",
											"value": "32"
										},
										{
											"begin": 856,
											"end": 867,
											"name": "JUMPI"
										},
										{
											"begin": 856,
											"end": 867,
											"name": "INVALID"
										},
										{
											"begin": 856,
											"end": 867,
											"name": "tag",
											"value": "32"
										},
										{
											"begin": 856,
											"end": 867,
											"name": "JUMPDEST"
										},
										{
											"begin": 856,
											"end": 867,
											"name": "BYTE"
										},
										{
											"begin": 856,
											"end": 867,
											"name": "PUSH",
											"value": "100000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 856,
											"end": 867,
											"name": "MUL"
										},
										{
											"begin": 856,
											"end": 872,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 856,
											"end": 872,
											"name": "NOT"
										},
										{
											"begin": 856,
											"end": 872,
											"name": "AND"
										},
										{
											"begin": 856,
											"end": 872,
											"name": "EQ"
										},
										{
											"begin": 856,
											"end": 872,
											"name": "ISZERO"
										},
										{
											"begin": 846,
											"end": 872,
											"name": "tag",
											"value": "31"
										},
										{
											"begin": 846,
											"end": 872,
											"name": "JUMPDEST"
										},
										{
											"begin": 840,
											"end": 904,
											"name": "ISZERO"
										},
										{
											"begin": 840,
											"end": 904,
											"name": "PUSH [tag]",
											"value": "30"
										},
										{
											"begin": 840,
											"end": 904,
											"name": "JUMPI"
										},
										{
											"begin": 889,
											"end": 892,
											"name": "DUP2"
										},
										{
											"begin": 889,
											"end": 892,
											"name": "DUP1"
										},
										{
											"begin": 889,
											"end": 892,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 889,
											"end": 892,
											"name": "ADD"
										},
										{
											"begin": 889,
											"end": 892,
											"name": "SWAP3"
										},
										{
											"begin": 889,
											"end": 892,
											"name": "POP"
										},
										{
											"begin": 889,
											"end": 892,
											"name": "POP"
										},
										{
											"begin": 840,
											"end": 904,
											"name": "PUSH [tag]",
											"value": "29"
										},
										{
											"begin": 840,
											"end": 904,
											"name": "JUMP"
										},
										{
											"begin": 840,
											"end": 904,
											"name": "tag",
											"value": "30"
										},
										{
											"begin": 840,
											"end": 904,
											"name": "JUMPDEST"
										},
										{
											"begin": 950,
											"end": 951,
											"name": "DUP2"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "AND"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "MLOAD"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "SWAP1"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "DUP1"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "DUP3"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "MSTORE"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "DUP1"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "ADD"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "NOT"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "AND"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "ADD"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "DUP3"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "ADD"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "MSTORE"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "DUP1"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "ISZERO"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "PUSH [tag]",
											"value": "33"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "JUMPI"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "DUP2"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "ADD"
										},
										{
											"begin": 29,
											"end": 31,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 21,
											"end": 27,
											"name": "DUP3"
										},
										{
											"begin": 17,
											"end": 32,
											"name": "MUL"
										},
										{
											"begin": 117,
											"end": 121,
											"name": "DUP1"
										},
										{
											"begin": 105,
											"end": 115,
											"name": "CODESIZE"
										},
										{
											"begin": 97,
											"end": 103,
											"name": "DUP4"
										},
										{
											"begin": 88,
											"end": 122,
											"name": "CODECOPY"
										},
										{
											"begin": 148,
											"end": 152,
											"name": "DUP1"
										},
										{
											"begin": 140,
											"end": 146,
											"name": "DUP3"
										},
										{
											"begin": 136,
											"end": 153,
											"name": "ADD"
										},
										{
											"begin": 126,
											"end": 153,
											"name": "SWAP2"
										},
										{
											"begin": 126,
											"end": 153,
											"name": "POP"
										},
										{
											"begin": 0,
											"end": 157,
											"name": "POP"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "SWAP1"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "POP"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "tag",
											"value": "33"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "JUMPDEST"
										},
										{
											"begin": 940,
											"end": 952,
											"name": "POP"
										},
										{
											"begin": 914,
											"end": 952,
											"name": "SWAP1"
										},
										{
											"begin": 914,
											"end": 952,
											"name": "POP"
										},
										{
											"begin": 972,
											"end": 973,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 968,
											"end": 973,
											"name": "SWAP2"
										},
										{
											"begin": 968,
											"end": 973,
											"name": "POP"
										},
										{
											"begin": 963,
											"end": 1062,
											"name": "tag",
											"value": "34"
										},
										{
											"begin": 963,
											"end": 1062,
											"name": "JUMPDEST"
										},
										{
											"begin": 979,
											"end": 981,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 975,
											"end": 976,
											"name": "DUP3"
										},
										{
											"begin": 975,
											"end": 981,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 975,
											"end": 981,
											"name": "AND"
										},
										{
											"begin": 975,
											"end": 981,
											"name": "LT"
										},
										{
											"begin": 975,
											"end": 1001,
											"name": "DUP1"
										},
										{
											"begin": 975,
											"end": 1001,
											"name": "ISZERO"
										},
										{
											"begin": 975,
											"end": 1001,
											"name": "PUSH [tag]",
											"value": "37"
										},
										{
											"begin": 975,
											"end": 1001,
											"name": "JUMPI"
										},
										{
											"begin": 975,
											"end": 1001,
											"name": "POP"
										},
										{
											"begin": 1000,
											"end": 1001,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 985,
											"end": 1001,
											"name": "PUSH",
											"value": "100000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 985,
											"end": 1001,
											"name": "MUL"
										},
										{
											"begin": 985,
											"end": 993,
											"name": "DUP5"
										},
										{
											"begin": 994,
											"end": 995,
											"name": "DUP4"
										},
										{
											"begin": 985,
											"end": 996,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 985,
											"end": 996,
											"name": "AND"
										},
										{
											"begin": 985,
											"end": 996,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 985,
											"end": 996,
											"name": "DUP2"
										},
										{
											"begin": 985,
											"end": 996,
											"name": "LT"
										},
										{
											"begin": 985,
											"end": 996,
											"name": "ISZERO"
										},
										{
											"begin": 985,
											"end": 996,
											"name": "ISZERO"
										},
										{
											"begin": 985,
											"end": 996,
											"name": "PUSH [tag]",
											"value": "38"
										},
										{
											"begin": 985,
											"end": 996,
											"name": "JUMPI"
										},
										{
											"begin": 985,
											"end": 996,
											"name": "INVALID"
										},
										{
											"begin": 985,
											"end": 996,
											"name": "tag",
											"value": "38"
										},
										{
											"begin": 985,
											"end": 996,
											"name": "JUMPDEST"
										},
										{
											"begin": 985,
											"end": 996,
											"name": "BYTE"
										},
										{
											"begin": 985,
											"end": 996,
											"name": "PUSH",
											"value": "100000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 985,
											"end": 996,
											"name": "MUL"
										},
										{
											"begin": 985,
											"end": 1001,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 985,
											"end": 1001,
											"name": "NOT"
										},
										{
											"begin": 985,
											"end": 1001,
											"name": "AND"
										},
										{
											"begin": 985,
											"end": 1001,
											"name": "EQ"
										},
										{
											"begin": 985,
											"end": 1001,
											"name": "ISZERO"
										},
										{
											"begin": 975,
											"end": 1001,
											"name": "tag",
											"value": "37"
										},
										{
											"begin": 975,
											"end": 1001,
											"name": "JUMPDEST"
										},
										{
											"begin": 963,
											"end": 1062,
											"name": "ISZERO"
										},
										{
											"begin": 963,
											"end": 1062,
											"name": "PUSH [tag]",
											"value": "35"
										},
										{
											"begin": 963,
											"end": 1062,
											"name": "JUMPI"
										},
										{
											"begin": 1039,
											"end": 1047,
											"name": "DUP4"
										},
										{
											"begin": 1048,
											"end": 1049,
											"name": "DUP3"
										},
										{
											"begin": 1039,
											"end": 1050,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 1039,
											"end": 1050,
											"name": "AND"
										},
										{
											"begin": 1039,
											"end": 1050,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1039,
											"end": 1050,
											"name": "DUP2"
										},
										{
											"begin": 1039,
											"end": 1050,
											"name": "LT"
										},
										{
											"begin": 1039,
											"end": 1050,
											"name": "ISZERO"
										},
										{
											"begin": 1039,
											"end": 1050,
											"name": "ISZERO"
										},
										{
											"begin": 1039,
											"end": 1050,
											"name": "PUSH [tag]",
											"value": "39"
										},
										{
											"begin": 1039,
											"end": 1050,
											"name": "JUMPI"
										},
										{
											"begin": 1039,
											"end": 1050,
											"name": "INVALID"
										},
										{
											"begin": 1039,
											"end": 1050,
											"name": "tag",
											"value": "39"
										},
										{
											"begin": 1039,
											"end": 1050,
											"name": "JUMPDEST"
										},
										{
											"begin": 1039,
											"end": 1050,
											"name": "BYTE"
										},
										{
											"begin": 1039,
											"end": 1050,
											"name": "PUSH",
											"value": "100000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1039,
											"end": 1050,
											"name": "MUL"
										},
										{
											"begin": 1023,
											"end": 1033,
											"name": "DUP2"
										},
										{
											"begin": 1034,
											"end": 1035,
											"name": "DUP4"
										},
										{
											"begin": 1023,
											"end": 1036,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 1023,
											"end": 1036,
											"name": "AND"
										},
										{
											"begin": 1023,
											"end": 1036,
											"name": "DUP2"
										},
										{
											"begin": 1023,
											"end": 1036,
											"name": "MLOAD"
										},
										{
											"begin": 1023,
											"end": 1036,
											"name": "DUP2"
										},
										{
											"begin": 1023,
											"end": 1036,
											"name": "LT"
										},
										{
											"begin": 1023,
											"end": 1036,
											"name": "ISZERO"
										},
										{
											"begin": 1023,
											"end": 1036,
											"name": "ISZERO"
										},
										{
											"begin": 1023,
											"end": 1036,
											"name": "PUSH [tag]",
											"value": "40"
										},
										{
											"begin": 1023,
											"end": 1036,
											"name": "JUMPI"
										},
										{
											"begin": 1023,
											"end": 1036,
											"name": "INVALID"
										},
										{
											"begin": 1023,
											"end": 1036,
											"name": "tag",
											"value": "40"
										},
										{
											"begin": 1023,
											"end": 1036,
											"name": "JUMPDEST"
										},
										{
											"begin": 1023,
											"end": 1036,
											"name": "SWAP1"
										},
										{
											"begin": 1023,
											"end": 1036,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1023,
											"end": 1036,
											"name": "ADD"
										},
										{
											"begin": 1023,
											"end": 1036,
											"name": "ADD"
										},
										{
											"begin": 1023,
											"end": 1050,
											"name": "SWAP1"
										},
										{
											"begin": 1023,
											"end": 1050,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1023,
											"end": 1050,
											"name": "NOT"
										},
										{
											"begin": 1023,
											"end": 1050,
											"name": "AND"
										},
										{
											"begin": 1023,
											"end": 1050,
											"name": "SWAP1"
										},
										{
											"begin": 1023,
											"end": 1050,
											"name": "DUP2"
										},
										{
											"begin": 1023,
											"end": 1050,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1023,
											"end": 1050,
											"name": "BYTE"
										},
										{
											"begin": 1023,
											"end": 1050,
											"name": "SWAP1"
										},
										{
											"begin": 1023,
											"end": 1050,
											"name": "MSTORE8"
										},
										{
											"begin": 1023,
											"end": 1050,
											"name": "POP"
										},
										{
											"begin": 1003,
											"end": 1006,
											"name": "DUP2"
										},
										{
											"begin": 1003,
											"end": 1006,
											"name": "DUP1"
										},
										{
											"begin": 1003,
											"end": 1006,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1003,
											"end": 1006,
											"name": "ADD"
										},
										{
											"begin": 1003,
											"end": 1006,
											"name": "SWAP3"
										},
										{
											"begin": 1003,
											"end": 1006,
											"name": "POP"
										},
										{
											"begin": 1003,
											"end": 1006,
											"name": "POP"
										},
										{
											"begin": 963,
											"end": 1062,
											"name": "PUSH [tag]",
											"value": "34"
										},
										{
											"begin": 963,
											"end": 1062,
											"name": "JUMP"
										},
										{
											"begin": 963,
											"end": 1062,
											"name": "tag",
											"value": "35"
										},
										{
											"begin": 963,
											"end": 1062,
											"name": "JUMPDEST"
										},
										{
											"begin": 1086,
											"end": 1096,
											"name": "DUP1"
										},
										{
											"begin": 1072,
											"end": 1097,
											"name": "SWAP3"
										},
										{
											"begin": 1072,
											"end": 1097,
											"name": "POP"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "POP"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "POP"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "SWAP2"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "SWAP1"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "POP"
										},
										{
											"begin": 734,
											"end": 1105,
											"name": "JUMP",
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"bytes32ToString(bytes32)": "9201de55",
							"checkSerial(uint256,bytes32)": "60eaf1df",
							"regWarranty(uint256,bytes32)": "4716d27a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.4.26+commit.4563c3fc\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"Num\",\"type\":\"uint256\"},{\"name\":\"regSer\",\"type\":\"bytes32\"}],\"name\":\"regWarranty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"n\",\"type\":\"uint256\"},{\"name\":\"sn\",\"type\":\"bytes32\"}],\"name\":\"checkSerial\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bytes32\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/Production.sol\":\"Production\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Production.sol\":{\"keccak256\":\"0xc8642e76763c043d09b8d30b073fca86f171db2e4d79485a8465acf026d3ac6e\",\"urls\":[\"bzzr://8404eac76986edf7209fa40055a3e518c5357dfe2c959bce8a51ce5ce4d7cfdb\"]}},\"version\":1}",
					"userdoc": {
						"methods": {}
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"formattedMessage": "contracts/Production.sol:31:5: Warning: No visibility specified. Defaulting to \"public\". \n    function bytes32ToString(bytes32 _bytes32)  pure returns (string memory) {\r\n    ^ (Relevant source part starts here and spans across multiple lines).\n",
				"message": "No visibility specified. Defaulting to \"public\". ",
				"severity": "warning",
				"sourceLocation": {
					"end": 1105,
					"file": "contracts/Production.sol",
					"start": 734
				},
				"type": "Warning"
			}
		],
		"sources": {
			"contracts/Production.sol": {
				"ast": {
					"absolutePath": "contracts/Production.sol",
					"exportedSymbols": {
						"Production": [
							185
						]
					},
					"id": 186,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.4",
								".17"
							],
							"nodeType": "PragmaDirective",
							"src": "0:24:0"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 185,
							"linearizedBaseContracts": [
								185
							],
							"name": "Production",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Production.Product",
									"id": 10,
									"members": [
										{
											"constant": false,
											"id": 4,
											"name": "serialNo",
											"nodeType": "VariableDeclaration",
											"scope": 10,
											"src": "84:18:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
												"typeString": "bytes32[]"
											},
											"typeName": {
												"baseType": {
													"id": 2,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "84:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 3,
												"length": null,
												"nodeType": "ArrayTypeName",
												"src": "84:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
													"typeString": "bytes32[]"
												}
											},
											"value": null,
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 7,
											"name": "registered",
											"nodeType": "VariableDeclaration",
											"scope": 10,
											"src": "113:20:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
												"typeString": "bytes32[]"
											},
											"typeName": {
												"baseType": {
													"id": 5,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "113:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 6,
												"length": null,
												"nodeType": "ArrayTypeName",
												"src": "113:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
													"typeString": "bytes32[]"
												}
											},
											"value": null,
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 9,
											"name": "regNo",
											"nodeType": "VariableDeclaration",
											"scope": 10,
											"src": "144:10:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 8,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "144:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"value": null,
											"visibility": "internal"
										}
									],
									"name": "Product",
									"nodeType": "StructDefinition",
									"scope": 185,
									"src": "58:104:0",
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 12,
									"name": "product",
									"nodeType": "VariableDeclaration",
									"scope": 185,
									"src": "170:15:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_struct$_Product_$10_storage",
										"typeString": "struct Production.Product"
									},
									"typeName": {
										"contractScope": null,
										"id": 11,
										"name": "Product",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 10,
										"src": "170:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_Product_$10_storage_ptr",
											"typeString": "struct Production.Product"
										}
									},
									"value": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 68,
										"nodeType": "Block",
										"src": "239:280:0",
										"statements": [
											{
												"assignments": [
													18
												],
												"declarations": [
													{
														"constant": false,
														"id": 18,
														"name": "hash",
														"nodeType": "VariableDeclaration",
														"scope": 69,
														"src": "250:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 17,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "250:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 25,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 22,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 14,
																	"src": "292:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"id": 20,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 187,
																	"src": "275:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 21,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "275:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 23,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "275:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 19,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 194,
														"src": "265:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_sha3_pure$__$returns$_t_bytes32_$",
															"typeString": "function () pure returns (bytes32)"
														}
													},
													"id": 24,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "265:30:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "250:45:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 31,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 18,
															"src": "328:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 26,
																"name": "product",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 12,
																"src": "306:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Product_$10_storage",
																	"typeString": "struct Production.Product storage ref"
																}
															},
															"id": 29,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "serialNo",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 4,
															"src": "306:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																"typeString": "bytes32[] storage ref"
															}
														},
														"id": 30,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "push",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "306:21:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypush_nonpayable$_t_bytes32_$returns$_t_uint256_$",
															"typeString": "function (bytes32) returns (uint256)"
														}
													},
													"id": 32,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "306:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 33,
												"nodeType": "ExpressionStatement",
												"src": "306:27:0"
											},
											{
												"body": {
													"id": 66,
													"nodeType": "Block",
													"src": "374:138:0",
													"statements": [
														{
															"assignments": [
																45
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 45,
																	"name": "serial",
																	"nodeType": "VariableDeclaration",
																	"scope": 69,
																	"src": "389:14:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 44,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "389:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"value": null,
																	"visibility": "internal"
																}
															],
															"id": 57,
															"initialValue": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"arguments": [
																			{
																				"argumentTypes": null,
																				"baseExpression": {
																					"argumentTypes": null,
																					"expression": {
																						"argumentTypes": null,
																						"id": 49,
																						"name": "product",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 12,
																						"src": "433:7:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Product_$10_storage",
																							"typeString": "struct Production.Product storage ref"
																						}
																					},
																					"id": 50,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "serialNo",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 4,
																					"src": "433:16:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																						"typeString": "bytes32[] storage ref"
																					}
																				},
																				"id": 54,
																				"indexExpression": {
																					"argumentTypes": null,
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 53,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"argumentTypes": null,
																						"id": 51,
																						"name": "i",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 35,
																						"src": "450:1:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "-",
																					"rightExpression": {
																						"argumentTypes": null,
																						"hexValue": "31",
																						"id": 52,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "452:1:0",
																						"subdenomination": null,
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"src": "450:3:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "433:21:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			],
																			"expression": {
																				"argumentTypes": null,
																				"id": 47,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 187,
																				"src": "416:3:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 48,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "encodePacked",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": null,
																			"src": "416:16:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function () pure returns (bytes memory)"
																			}
																		},
																		"id": 55,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "416:39:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 46,
																	"name": "keccak256",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 194,
																	"src": "406:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_sha3_pure$__$returns$_t_bytes32_$",
																		"typeString": "function () pure returns (bytes32)"
																	}
																},
																"id": 56,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "406:50:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "389:67:0"
														},
														{
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 63,
																		"name": "serial",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 45,
																		"src": "493:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"expression": {
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 58,
																			"name": "product",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 12,
																			"src": "471:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Product_$10_storage",
																				"typeString": "struct Production.Product storage ref"
																			}
																		},
																		"id": 61,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "serialNo",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 4,
																		"src": "471:16:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																			"typeString": "bytes32[] storage ref"
																		}
																	},
																	"id": 62,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "push",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "471:21:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_arraypush_nonpayable$_t_bytes32_$returns$_t_uint256_$",
																		"typeString": "function (bytes32) returns (uint256)"
																	}
																},
																"id": 64,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "471:29:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 65,
															"nodeType": "ExpressionStatement",
															"src": "471:29:0"
														}
													]
												},
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 40,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 38,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 35,
														"src": "363:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "3130",
														"id": 39,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "365:2:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_10_by_1",
															"typeString": "int_const 10"
														},
														"value": "10"
													},
													"src": "363:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 67,
												"initializationExpression": {
													"assignments": [
														35
													],
													"declarations": [
														{
															"constant": false,
															"id": 35,
															"name": "i",
															"nodeType": "VariableDeclaration",
															"scope": 69,
															"src": "351:6:0",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 34,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "351:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"value": null,
															"visibility": "internal"
														}
													],
													"id": 37,
													"initialValue": {
														"argumentTypes": null,
														"hexValue": "31",
														"id": 36,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "360:1:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "351:10:0"
												},
												"loopExpression": {
													"expression": {
														"argumentTypes": null,
														"id": 42,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "369:3:0",
														"subExpression": {
															"argumentTypes": null,
															"id": 41,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 35,
															"src": "369:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 43,
													"nodeType": "ExpressionStatement",
													"src": "369:3:0"
												},
												"nodeType": "ForStatement",
												"src": "346:166:0"
											}
										]
									},
									"documentation": null,
									"id": 69,
									"implemented": true,
									"isConstructor": false,
									"isDeclaredConst": false,
									"modifiers": [],
									"name": "setProduct",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 69,
												"src": "214:15:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 13,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "214:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "213:17:0"
									},
									"payable": false,
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "239:0:0"
									},
									"scope": 185,
									"src": "194:325:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "private"
								},
								{
									"body": {
										"id": 91,
										"nodeType": "Block",
										"src": "594:132:0",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 83,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 78,
														"name": "sn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 73,
														"src": "609:2:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 79,
																"name": "product",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 12,
																"src": "615:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Product_$10_storage",
																	"typeString": "struct Production.Product storage ref"
																}
															},
															"id": 80,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "serialNo",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 4,
															"src": "615:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																"typeString": "bytes32[] storage ref"
															}
														},
														"id": 82,
														"indexExpression": {
															"argumentTypes": null,
															"id": 81,
															"name": "n",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 71,
															"src": "632:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "615:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "609:25:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 89,
													"nodeType": "Block",
													"src": "680:39:0",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"hexValue": "66616c7365",
																"id": 87,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "702:5:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"functionReturnParameters": 77,
															"id": 88,
															"nodeType": "Return",
															"src": "695:12:0"
														}
													]
												},
												"id": 90,
												"nodeType": "IfStatement",
												"src": "605:114:0",
												"trueBody": {
													"id": 86,
													"nodeType": "Block",
													"src": "636:38:0",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"hexValue": "74727565",
																"id": 84,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "658:4:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 77,
															"id": 85,
															"nodeType": "Return",
															"src": "651:11:0"
														}
													]
												}
											}
										]
									},
									"documentation": null,
									"id": 92,
									"implemented": true,
									"isConstructor": false,
									"isDeclaredConst": true,
									"modifiers": [],
									"name": "checkSerial",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 74,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"name": "n",
												"nodeType": "VariableDeclaration",
												"scope": 92,
												"src": "548:6:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 70,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "548:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 73,
												"name": "sn",
												"nodeType": "VariableDeclaration",
												"scope": 92,
												"src": "556:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 72,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "556:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "547:20:0"
									},
									"payable": false,
									"returnParameters": {
										"id": 77,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 76,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 92,
												"src": "588:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 75,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "588:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "587:6:0"
									},
									"scope": 185,
									"src": "527:199:0",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 154,
										"nodeType": "Block",
										"src": "807:298:0",
										"statements": [
											{
												"assignments": [
													100
												],
												"declarations": [
													{
														"constant": false,
														"id": 100,
														"name": "i",
														"nodeType": "VariableDeclaration",
														"scope": 155,
														"src": "818:7:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"typeName": {
															"id": 99,
															"name": "uint8",
															"nodeType": "ElementaryTypeName",
															"src": "818:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 102,
												"initialValue": {
													"argumentTypes": null,
													"hexValue": "30",
													"id": 101,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "828:1:0",
													"subdenomination": null,
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "818:11:0"
											},
											{
												"body": {
													"id": 115,
													"nodeType": "Block",
													"src": "874:30:0",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 113,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "889:3:0",
																"subExpression": {
																	"argumentTypes": null,
																	"id": 112,
																	"name": "i",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 100,
																	"src": "889:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 114,
															"nodeType": "ExpressionStatement",
															"src": "889:3:0"
														}
													]
												},
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 111,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"id": 105,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"id": 103,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 100,
															"src": "846:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"argumentTypes": null,
															"hexValue": "3332",
															"id": 104,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "850:2:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "32"
														},
														"src": "846:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														},
														"id": 110,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"baseExpression": {
																"argumentTypes": null,
																"id": 106,
																"name": "_bytes32",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 94,
																"src": "856:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 108,
															"indexExpression": {
																"argumentTypes": null,
																"id": 107,
																"name": "i",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 100,
																"src": "865:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "856:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes1",
																"typeString": "bytes1"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"argumentTypes": null,
															"hexValue": "30",
															"id": 109,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "871:1:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "856:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "846:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 116,
												"nodeType": "WhileStatement",
												"src": "840:64:0"
											},
											{
												"assignments": [
													118
												],
												"declarations": [
													{
														"constant": false,
														"id": 118,
														"name": "bytesArray",
														"nodeType": "VariableDeclaration",
														"scope": 155,
														"src": "914:23:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 117,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "914:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 123,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 121,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 100,
															"src": "950:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 120,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "940:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 119,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "944:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 122,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "940:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "914:38:0"
											},
											{
												"body": {
													"id": 148,
													"nodeType": "Block",
													"src": "1008:54:0",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 146,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"id": 140,
																		"name": "bytesArray",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 118,
																		"src": "1023:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 142,
																	"indexExpression": {
																		"argumentTypes": null,
																		"id": 141,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 100,
																		"src": "1034:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "1023:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"id": 143,
																		"name": "_bytes32",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 94,
																		"src": "1039:8:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"id": 145,
																	"indexExpression": {
																		"argumentTypes": null,
																		"id": 144,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 100,
																		"src": "1048:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1039:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "1023:27:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 147,
															"nodeType": "ExpressionStatement",
															"src": "1023:27:0"
														}
													]
												},
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 136,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"id": 130,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"id": 128,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 100,
															"src": "975:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"argumentTypes": null,
															"hexValue": "3332",
															"id": 129,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "979:2:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "32"
														},
														"src": "975:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														},
														"id": 135,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"baseExpression": {
																"argumentTypes": null,
																"id": 131,
																"name": "_bytes32",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 94,
																"src": "985:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 133,
															"indexExpression": {
																"argumentTypes": null,
																"id": 132,
																"name": "i",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 100,
																"src": "994:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "985:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes1",
																"typeString": "bytes1"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"argumentTypes": null,
															"hexValue": "30",
															"id": 134,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1000:1:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "985:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "975:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 149,
												"initializationExpression": {
													"expression": {
														"argumentTypes": null,
														"id": 126,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"argumentTypes": null,
															"id": 124,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 100,
															"src": "968:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"argumentTypes": null,
															"hexValue": "30",
															"id": 125,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "972:1:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "968:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"id": 127,
													"nodeType": "ExpressionStatement",
													"src": "968:5:0"
												},
												"loopExpression": {
													"expression": {
														"argumentTypes": null,
														"id": 138,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "1003:3:0",
														"subExpression": {
															"argumentTypes": null,
															"id": 137,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 100,
															"src": "1003:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"id": 139,
													"nodeType": "ExpressionStatement",
													"src": "1003:3:0"
												},
												"nodeType": "ForStatement",
												"src": "963:99:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 151,
															"name": "bytesArray",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 118,
															"src": "1086:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 150,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1079:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": "string"
													},
													"id": 152,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1079:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 98,
												"id": 153,
												"nodeType": "Return",
												"src": "1072:25:0"
											}
										]
									},
									"documentation": null,
									"id": 155,
									"implemented": true,
									"isConstructor": false,
									"isDeclaredConst": true,
									"modifiers": [],
									"name": "bytes32ToString",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 94,
												"name": "_bytes32",
												"nodeType": "VariableDeclaration",
												"scope": 155,
												"src": "759:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 93,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "759:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "758:18:0"
									},
									"payable": false,
									"returnParameters": {
										"id": 98,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 97,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 155,
												"src": "792:6:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 96,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "792:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "791:15:0"
									},
									"scope": 185,
									"src": "734:371:0",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 183,
										"nodeType": "Block",
										"src": "1167:143:0",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 167,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 162,
																"name": "product",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 12,
																"src": "1182:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Product_$10_storage",
																	"typeString": "struct Production.Product storage ref"
																}
															},
															"id": 163,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "serialNo",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 4,
															"src": "1182:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																"typeString": "bytes32[] storage ref"
															}
														},
														"id": 165,
														"indexExpression": {
															"argumentTypes": null,
															"id": 164,
															"name": "Num",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 157,
															"src": "1199:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "1182:21:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"id": 166,
														"name": "regSer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 159,
														"src": "1207:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "1182:31:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 182,
												"nodeType": "IfStatement",
												"src": "1178:125:0",
												"trueBody": {
													"id": 181,
													"nodeType": "Block",
													"src": "1215:88:0",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 173,
																		"name": "regSer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 159,
																		"src": "1254:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"expression": {
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 168,
																			"name": "product",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 12,
																			"src": "1230:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Product_$10_storage",
																				"typeString": "struct Production.Product storage ref"
																			}
																		},
																		"id": 171,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "registered",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 7,
																		"src": "1230:18:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																			"typeString": "bytes32[] storage ref"
																		}
																	},
																	"id": 172,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "push",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "1230:23:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_arraypush_nonpayable$_t_bytes32_$returns$_t_uint256_$",
																		"typeString": "function (bytes32) returns (uint256)"
																	}
																},
																"id": 174,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1230:31:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 175,
															"nodeType": "ExpressionStatement",
															"src": "1230:31:0"
														},
														{
															"expression": {
																"argumentTypes": null,
																"id": 179,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "1276:15:0",
																"subExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 176,
																		"name": "product",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 12,
																		"src": "1276:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Product_$10_storage",
																			"typeString": "struct Production.Product storage ref"
																		}
																	},
																	"id": 178,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "regNo",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 9,
																	"src": "1276:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 180,
															"nodeType": "ExpressionStatement",
															"src": "1276:15:0"
														}
													]
												}
											}
										]
									},
									"documentation": null,
									"id": 184,
									"implemented": true,
									"isConstructor": false,
									"isDeclaredConst": false,
									"modifiers": [],
									"name": "regWarranty",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 160,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 157,
												"name": "Num",
												"nodeType": "VariableDeclaration",
												"scope": 184,
												"src": "1134:8:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 156,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1134:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 159,
												"name": "regSer",
												"nodeType": "VariableDeclaration",
												"scope": 184,
												"src": "1144:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 158,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1144:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1133:26:0"
									},
									"payable": false,
									"returnParameters": {
										"id": 161,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1167:0:0"
									},
									"scope": 185,
									"src": "1113:197:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								}
							],
							"scope": 186,
							"src": "28:1285:0"
						}
					],
					"src": "0:1313:0"
				},
				"id": 0
			}
		}
	}
}