{
	"id": "293b4c3a8edfc01bda20e8e4e8a8821a",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.4.26",
	"solcLongVersion": "0.4.26+commit.4563c3fc",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Production.sol": {
				"content": "pragma solidity ^0.4.17;\r\n\r\ncontract Production {\r\n\r\n     struct Product {\r\n        bytes32[10] serialNo;\r\n        bytes32[10] registered;\r\n        uint regNo;\r\n    }\r\n\r\n    Product product;\r\n\r\n    function setProduct(string memory a) private {\r\n        bytes32 hash = keccak256(abi.encodePacked(a));\r\n        // product.serialNo.push(hash);\r\n\r\n        for (uint i = 1; i<10; i++) {\r\n            bytes32 serial = keccak256(abi.encodePacked(product.serialNo[i-1]));\r\n            // product.serialNo.push(serial);\r\n        }\r\n    }\r\n\r\n    function checkSerial(uint n, bytes32 sn) public view returns(bool) {\r\n        if (sn == product.serialNo[n]) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function bytes32ToString(bytes32 _bytes32) public pure returns (string memory) {\r\n        uint8 i = 0;\r\n        while(i < 32 && _bytes32[i] != 0) {\r\n            i++;\r\n        }\r\n        bytes memory bytesArray = new bytes(i);\r\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\r\n            bytesArray[i] = _bytes32[i];\r\n        }\r\n        return string(bytesArray);\r\n    }\r\n\r\n    function regWarranty(uint Num, bytes32 regSer) public {\r\n        if (product.serialNo[Num] == regSer) {\r\n            // product.registered.push(regSer);\r\n            product.regNo++;\r\n        }\r\n    }\r\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/Production.sol": {
				"Production": {
					"abi": [
						{
							"constant": false,
							"inputs": [
								{
									"name": "Num",
									"type": "uint256"
								},
								{
									"name": "regSer",
									"type": "bytes32"
								}
							],
							"name": "regWarranty",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"name": "n",
									"type": "uint256"
								},
								{
									"name": "sn",
									"type": "bytes32"
								}
							],
							"name": "checkSerial",
							"outputs": [
								{
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"name": "_bytes32",
									"type": "bytes32"
								}
							],
							"name": "bytes32ToString",
							"outputs": [
								{
									"name": "",
									"type": "string"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"methods": {}
					},
					"evm": {
						"assembly": "    /* \"contracts/Production.sol\":28:1332  contract Production {\r... */\n  mstore(0x40, 0x80)\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x0\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"contracts/Production.sol\":28:1332  contract Production {\r... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x0\n  codecopy\n  0x0\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Production.sol\":28:1332  contract Production {\r... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x4))\n      calldataload(0x0)\n      0x100000000000000000000000000000000000000000000000000000000\n      swap1\n      div\n      0xffffffff\n      and\n      dup1\n      0x4716d27a\n      eq\n      tag_2\n      jumpi\n      dup1\n      0x60eaf1df\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x9201de55\n      eq\n      tag_4\n      jumpi\n    tag_1:\n      0x0\n      dup1\n      revert\n        /* \"contracts/Production.sol\":1129:1329  function regWarranty(uint Num, bytes32 regSer) public {\r... */\n    tag_2:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_5\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x0\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_5:\n        /* \"contracts/Production.sol\":1129:1329  function regWarranty(uint Num, bytes32 regSer) public {\r... */\n      pop\n      tag_6\n      0x4\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      not(0x0)\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      jump(tag_7)\n    tag_6:\n      stop\n        /* \"contracts/Production.sol\":537:736  function checkSerial(uint n, bytes32 sn) public view returns(bool) {\r... */\n    tag_3:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_8\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x0\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_8:\n        /* \"contracts/Production.sol\":537:736  function checkSerial(uint n, bytes32 sn) public view returns(bool) {\r... */\n      pop\n      tag_9\n      0x4\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      not(0x0)\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      jump(tag_10)\n    tag_9:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Production.sol\":744:1121  function bytes32ToString(bytes32 _bytes32) public pure returns (string memory) {\r... */\n    tag_4:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_11\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x0\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_11:\n        /* \"contracts/Production.sol\":744:1121  function bytes32ToString(bytes32 _bytes32) public pure returns (string memory) {\r... */\n      pop\n      tag_12\n      0x4\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      not(0x0)\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      jump(tag_13)\n    tag_12:\n      mload(0x40)\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n        /* \"--CODEGEN--\":23:24   */\n      0x0\n        /* \"--CODEGEN--\":8:108   */\n    tag_14:\n        /* \"--CODEGEN--\":33:36   */\n      dup4\n        /* \"--CODEGEN--\":30:31   */\n      dup2\n        /* \"--CODEGEN--\":27:37   */\n      lt\n        /* \"--CODEGEN--\":8:108   */\n      iszero\n      tag_15\n      jumpi\n        /* \"--CODEGEN--\":99:100   */\n      dup1\n        /* \"--CODEGEN--\":94:97   */\n      dup3\n        /* \"--CODEGEN--\":90:101   */\n      add\n        /* \"--CODEGEN--\":84:102   */\n      mload\n        /* \"--CODEGEN--\":80:81   */\n      dup2\n        /* \"--CODEGEN--\":75:78   */\n      dup5\n        /* \"--CODEGEN--\":71:82   */\n      add\n        /* \"--CODEGEN--\":64:103   */\n      mstore\n        /* \"--CODEGEN--\":52:54   */\n      0x20\n        /* \"--CODEGEN--\":49:50   */\n      dup2\n        /* \"--CODEGEN--\":45:55   */\n      add\n        /* \"--CODEGEN--\":40:55   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":8:108   */\n      jump(tag_14)\n    tag_15:\n        /* \"--CODEGEN--\":12:26   */\n      pop\n        /* \"contracts/Production.sol\":744:1121  function bytes32ToString(bytes32 _bytes32) public pure returns (string memory) {\r... */\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_17\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x1\n      dup4\n      0x20\n      sub\n      0x100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_17:\n      pop\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Production.sol\":1129:1329  function regWarranty(uint Num, bytes32 regSer) public {\r... */\n    tag_7:\n        /* \"contracts/Production.sol\":1223:1229  regSer */\n      dup1\n        /* \"contracts/Production.sol\":1198:1229  product.serialNo[Num] == regSer */\n      not(0x0)\n      and\n        /* \"contracts/Production.sol\":1198:1205  product */\n      0x0\n        /* \"contracts/Production.sol\":1198:1214  product.serialNo */\n      dup1\n      add\n        /* \"contracts/Production.sol\":1215:1218  Num */\n      dup4\n        /* \"contracts/Production.sol\":1198:1219  product.serialNo[Num] */\n      0xa\n      dup2\n      lt\n      iszero\n      iszero\n      tag_19\n      jumpi\n      invalid\n    tag_19:\n      add\n      sload\n        /* \"contracts/Production.sol\":1198:1229  product.serialNo[Num] == regSer */\n      not(0x0)\n      and\n      eq\n        /* \"contracts/Production.sol\":1194:1322  if (product.serialNo[Num] == regSer) {\r... */\n      iszero\n      tag_21\n      jumpi\n        /* \"contracts/Production.sol\":1295:1302  product */\n      0x0\n        /* \"contracts/Production.sol\":1295:1308  product.regNo */\n      0x14\n      add\n      0x0\n        /* \"contracts/Production.sol\":1295:1310  product.regNo++ */\n      dup2\n      sload\n      dup1\n      swap3\n      swap2\n      swap1\n      0x1\n      add\n      swap2\n      swap1\n      pop\n      sstore\n      pop\n        /* \"contracts/Production.sol\":1194:1322  if (product.serialNo[Num] == regSer) {\r... */\n    tag_21:\n        /* \"contracts/Production.sol\":1129:1329  function regWarranty(uint Num, bytes32 regSer) public {\r... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Production.sol\":537:736  function checkSerial(uint n, bytes32 sn) public view returns(bool) {\r... */\n    tag_10:\n        /* \"contracts/Production.sol\":598:602  bool */\n      0x0\n        /* \"contracts/Production.sol\":625:632  product */\n      dup1\n        /* \"contracts/Production.sol\":625:641  product.serialNo */\n      0x0\n      add\n        /* \"contracts/Production.sol\":642:643  n */\n      dup4\n        /* \"contracts/Production.sol\":625:644  product.serialNo[n] */\n      0xa\n      dup2\n      lt\n      iszero\n      iszero\n      tag_23\n      jumpi\n      invalid\n    tag_23:\n      add\n      sload\n        /* \"contracts/Production.sol\":619:644  sn == product.serialNo[n] */\n      not(0x0)\n      and\n        /* \"contracts/Production.sol\":619:621  sn */\n      dup3\n        /* \"contracts/Production.sol\":619:644  sn == product.serialNo[n] */\n      not(0x0)\n      and\n      eq\n        /* \"contracts/Production.sol\":615:729  if (sn == product.serialNo[n]) {\r... */\n      iszero\n      tag_25\n      jumpi\n        /* \"contracts/Production.sol\":668:672  true */\n      0x1\n        /* \"contracts/Production.sol\":661:672  return true */\n      swap1\n      pop\n      jump(tag_22)\n        /* \"contracts/Production.sol\":615:729  if (sn == product.serialNo[n]) {\r... */\n    tag_25:\n        /* \"contracts/Production.sol\":712:717  false */\n      0x0\n        /* \"contracts/Production.sol\":705:717  return false */\n      swap1\n      pop\n        /* \"contracts/Production.sol\":537:736  function checkSerial(uint n, bytes32 sn) public view returns(bool) {\r... */\n    tag_22:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Production.sol\":744:1121  function bytes32ToString(bytes32 _bytes32) public pure returns (string memory) {\r... */\n    tag_13:\n        /* \"contracts/Production.sol\":808:814  string */\n      0x60\n        /* \"contracts/Production.sol\":834:841  uint8 i */\n      0x0\n        /* \"contracts/Production.sol\":930:953  bytes memory bytesArray */\n      0x60\n        /* \"contracts/Production.sol\":844:845  0 */\n      0x0\n        /* \"contracts/Production.sol\":834:845  uint8 i = 0 */\n      swap2\n      pop\n        /* \"contracts/Production.sol\":856:920  while(i < 32 && _bytes32[i] != 0) {\r... */\n    tag_28:\n        /* \"contracts/Production.sol\":866:868  32 */\n      0x20\n        /* \"contracts/Production.sol\":862:863  i */\n      dup3\n        /* \"contracts/Production.sol\":862:868  i < 32 */\n      0xff\n      and\n      lt\n        /* \"contracts/Production.sol\":862:888  i < 32 && _bytes32[i] != 0 */\n      dup1\n      iszero\n      tag_30\n      jumpi\n      pop\n        /* \"contracts/Production.sol\":887:888  0 */\n      0x0\n        /* \"contracts/Production.sol\":872:888  _bytes32[i] != 0 */\n      0x100000000000000000000000000000000000000000000000000000000000000\n      mul\n        /* \"contracts/Production.sol\":872:880  _bytes32 */\n      dup5\n        /* \"contracts/Production.sol\":881:882  i */\n      dup4\n        /* \"contracts/Production.sol\":872:883  _bytes32[i] */\n      0xff\n      and\n      0x20\n      dup2\n      lt\n      iszero\n      iszero\n      tag_31\n      jumpi\n      invalid\n    tag_31:\n      byte\n      0x100000000000000000000000000000000000000000000000000000000000000\n      mul\n        /* \"contracts/Production.sol\":872:888  _bytes32[i] != 0 */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n      iszero\n        /* \"contracts/Production.sol\":862:888  i < 32 && _bytes32[i] != 0 */\n    tag_30:\n        /* \"contracts/Production.sol\":856:920  while(i < 32 && _bytes32[i] != 0) {\r... */\n      iszero\n      tag_29\n      jumpi\n        /* \"contracts/Production.sol\":905:908  i++ */\n      dup2\n      dup1\n      0x1\n      add\n      swap3\n      pop\n      pop\n        /* \"contracts/Production.sol\":856:920  while(i < 32 && _bytes32[i] != 0) {\r... */\n      jump(tag_28)\n    tag_29:\n        /* \"contracts/Production.sol\":966:967  i */\n      dup2\n        /* \"contracts/Production.sol\":956:968  new bytes(i) */\n      0xff\n      and\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_32\n      jumpi\n      dup2\n      0x20\n      add\n        /* \"--CODEGEN--\":29:31   */\n      0x20\n        /* \"--CODEGEN--\":21:27   */\n      dup3\n        /* \"--CODEGEN--\":17:32   */\n      mul\n        /* \"--CODEGEN--\":117:121   */\n      dup1\n        /* \"--CODEGEN--\":105:115   */\n      codesize\n        /* \"--CODEGEN--\":97:103   */\n      dup4\n        /* \"--CODEGEN--\":88:122   */\n      codecopy\n        /* \"--CODEGEN--\":148:152   */\n      dup1\n        /* \"--CODEGEN--\":140:146   */\n      dup3\n        /* \"--CODEGEN--\":136:153   */\n      add\n        /* \"--CODEGEN--\":126:153   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":0:157   */\n      pop\n        /* \"contracts/Production.sol\":956:968  new bytes(i) */\n      swap1\n      pop\n    tag_32:\n      pop\n        /* \"contracts/Production.sol\":930:968  bytes memory bytesArray = new bytes(i) */\n      swap1\n      pop\n        /* \"contracts/Production.sol\":988:989  0 */\n      0x0\n        /* \"contracts/Production.sol\":984:989  i = 0 */\n      swap2\n      pop\n        /* \"contracts/Production.sol\":979:1078  for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\r... */\n    tag_33:\n        /* \"contracts/Production.sol\":995:997  32 */\n      0x20\n        /* \"contracts/Production.sol\":991:992  i */\n      dup3\n        /* \"contracts/Production.sol\":991:997  i < 32 */\n      0xff\n      and\n      lt\n        /* \"contracts/Production.sol\":991:1017  i < 32 && _bytes32[i] != 0 */\n      dup1\n      iszero\n      tag_36\n      jumpi\n      pop\n        /* \"contracts/Production.sol\":1016:1017  0 */\n      0x0\n        /* \"contracts/Production.sol\":1001:1017  _bytes32[i] != 0 */\n      0x100000000000000000000000000000000000000000000000000000000000000\n      mul\n        /* \"contracts/Production.sol\":1001:1009  _bytes32 */\n      dup5\n        /* \"contracts/Production.sol\":1010:1011  i */\n      dup4\n        /* \"contracts/Production.sol\":1001:1012  _bytes32[i] */\n      0xff\n      and\n      0x20\n      dup2\n      lt\n      iszero\n      iszero\n      tag_37\n      jumpi\n      invalid\n    tag_37:\n      byte\n      0x100000000000000000000000000000000000000000000000000000000000000\n      mul\n        /* \"contracts/Production.sol\":1001:1017  _bytes32[i] != 0 */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n      iszero\n        /* \"contracts/Production.sol\":991:1017  i < 32 && _bytes32[i] != 0 */\n    tag_36:\n        /* \"contracts/Production.sol\":979:1078  for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\r... */\n      iszero\n      tag_34\n      jumpi\n        /* \"contracts/Production.sol\":1055:1063  _bytes32 */\n      dup4\n        /* \"contracts/Production.sol\":1064:1065  i */\n      dup3\n        /* \"contracts/Production.sol\":1055:1066  _bytes32[i] */\n      0xff\n      and\n      0x20\n      dup2\n      lt\n      iszero\n      iszero\n      tag_38\n      jumpi\n      invalid\n    tag_38:\n      byte\n      0x100000000000000000000000000000000000000000000000000000000000000\n      mul\n        /* \"contracts/Production.sol\":1039:1049  bytesArray */\n      dup2\n        /* \"contracts/Production.sol\":1050:1051  i */\n      dup4\n        /* \"contracts/Production.sol\":1039:1052  bytesArray[i] */\n      0xff\n      and\n      dup2\n      mload\n      dup2\n      lt\n      iszero\n      iszero\n      tag_39\n      jumpi\n      invalid\n    tag_39:\n      swap1\n      0x20\n      add\n      add\n        /* \"contracts/Production.sol\":1039:1066  bytesArray[i] = _bytes32[i] */\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      swap1\n      dup2\n      0x0\n      byte\n      swap1\n      mstore8\n      pop\n        /* \"contracts/Production.sol\":1019:1022  i++ */\n      dup2\n      dup1\n      0x1\n      add\n      swap3\n      pop\n      pop\n        /* \"contracts/Production.sol\":979:1078  for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\r... */\n      jump(tag_33)\n    tag_34:\n        /* \"contracts/Production.sol\":1102:1112  bytesArray */\n      dup1\n        /* \"contracts/Production.sol\":1088:1113  return string(bytesArray) */\n      swap3\n      pop\n        /* \"contracts/Production.sol\":744:1121  function bytes32ToString(bytes32 _bytes32) public pure returns (string memory) {\r... */\n      pop\n      pop\n      swap2\n      swap1\n      pop\n      jump\t// out\n\n    auxdata: 0xa165627a7a72305820778fe511e97753f598d516e57c8b45ecc969a58bfd218b32c7822e7808bb6a030029\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50610436806100206000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634716d27a1461005c57806360eaf1df146100975780639201de55146100ea575b600080fd5b34801561006857600080fd5b50610095600480360381019080803590602001909291908035600019169060200190929190505050610194565b005b3480156100a357600080fd5b506100d06004803603810190808035906020019092919080356000191690602001909291905050506101d0565b604051808215151515815260200191505060405180910390f35b3480156100f657600080fd5b506101196004803603810190808035600019169060200190929190505050610208565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561015957808201518184015260208101905061013e565b50505050905090810190601f1680156101865780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b80600019166000800183600a811015156101aa57fe5b01546000191614156101cc576000601401600081548092919060010191905055505b5050565b60008060000183600a811015156101e357fe5b015460001916826000191614156101fd5760019050610202565b600090505b92915050565b606060006060600091505b60208260ff1610801561029e575060007f010000000000000000000000000000000000000000000000000000000000000002848360ff1660208110151561025657fe5b1a7f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b156102b0578180600101925050610213565b8160ff166040519080825280601f01601f1916602001820160405280156102e65781602001602082028038833980820191505090505b509050600091505b60208260ff16108015610379575060007f010000000000000000000000000000000000000000000000000000000000000002848360ff1660208110151561033157fe5b1a7f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b1561040057838260ff1660208110151561038f57fe5b1a7f010000000000000000000000000000000000000000000000000000000000000002818360ff168151811015156103c357fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535081806001019250506102ee565b80925050509190505600a165627a7a72305820778fe511e97753f598d516e57c8b45ecc969a58bfd218b32c7822e7808bb6a030029",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x436 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP1 PUSH4 0x4716D27A EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x60EAF1DF EQ PUSH2 0x97 JUMPI DUP1 PUSH4 0x9201DE55 EQ PUSH2 0xEA JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x95 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH1 0x0 NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x194 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH1 0x0 NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1D0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x119 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH1 0x0 NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x208 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x159 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x13E JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x186 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP1 PUSH1 0x0 NOT AND PUSH1 0x0 DUP1 ADD DUP4 PUSH1 0xA DUP2 LT ISZERO ISZERO PUSH2 0x1AA JUMPI INVALID JUMPDEST ADD SLOAD PUSH1 0x0 NOT AND EQ ISZERO PUSH2 0x1CC JUMPI PUSH1 0x0 PUSH1 0x14 ADD PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 ADD SWAP2 SWAP1 POP SSTORE POP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 ADD DUP4 PUSH1 0xA DUP2 LT ISZERO ISZERO PUSH2 0x1E3 JUMPI INVALID JUMPDEST ADD SLOAD PUSH1 0x0 NOT AND DUP3 PUSH1 0x0 NOT AND EQ ISZERO PUSH2 0x1FD JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x202 JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 PUSH1 0xFF AND LT DUP1 ISZERO PUSH2 0x29E JUMPI POP PUSH1 0x0 PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL DUP5 DUP4 PUSH1 0xFF AND PUSH1 0x20 DUP2 LT ISZERO ISZERO PUSH2 0x256 JUMPI INVALID JUMPDEST BYTE PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x2B0 JUMPI DUP2 DUP1 PUSH1 0x1 ADD SWAP3 POP POP PUSH2 0x213 JUMP JUMPDEST DUP2 PUSH1 0xFF AND PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2E6 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 PUSH1 0xFF AND LT DUP1 ISZERO PUSH2 0x379 JUMPI POP PUSH1 0x0 PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL DUP5 DUP4 PUSH1 0xFF AND PUSH1 0x20 DUP2 LT ISZERO ISZERO PUSH2 0x331 JUMPI INVALID JUMPDEST BYTE PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x400 JUMPI DUP4 DUP3 PUSH1 0xFF AND PUSH1 0x20 DUP2 LT ISZERO ISZERO PUSH2 0x38F JUMPI INVALID JUMPDEST BYTE PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL DUP2 DUP4 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x3C3 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 DUP1 PUSH1 0x1 ADD SWAP3 POP POP PUSH2 0x2EE JUMP JUMPDEST DUP1 SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 PUSH24 0x8FE511E97753F598D516E57C8B45ECC969A58BFD218B32C7 DUP3 0x2e PUSH25 0x8BB6A03002900000000000000000000000000000000000000 ",
							"sourceMap": "28:1304:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;28:1304:0;;;;;;;"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634716d27a1461005c57806360eaf1df146100975780639201de55146100ea575b600080fd5b34801561006857600080fd5b50610095600480360381019080803590602001909291908035600019169060200190929190505050610194565b005b3480156100a357600080fd5b506100d06004803603810190808035906020019092919080356000191690602001909291905050506101d0565b604051808215151515815260200191505060405180910390f35b3480156100f657600080fd5b506101196004803603810190808035600019169060200190929190505050610208565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561015957808201518184015260208101905061013e565b50505050905090810190601f1680156101865780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b80600019166000800183600a811015156101aa57fe5b01546000191614156101cc576000601401600081548092919060010191905055505b5050565b60008060000183600a811015156101e357fe5b015460001916826000191614156101fd5760019050610202565b600090505b92915050565b606060006060600091505b60208260ff1610801561029e575060007f010000000000000000000000000000000000000000000000000000000000000002848360ff1660208110151561025657fe5b1a7f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b156102b0578180600101925050610213565b8160ff166040519080825280601f01601f1916602001820160405280156102e65781602001602082028038833980820191505090505b509050600091505b60208260ff16108015610379575060007f010000000000000000000000000000000000000000000000000000000000000002848360ff1660208110151561033157fe5b1a7f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b1561040057838260ff1660208110151561038f57fe5b1a7f010000000000000000000000000000000000000000000000000000000000000002818360ff168151811015156103c357fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535081806001019250506102ee565b80925050509190505600a165627a7a72305820778fe511e97753f598d516e57c8b45ecc969a58bfd218b32c7822e7808bb6a030029",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP1 PUSH4 0x4716D27A EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x60EAF1DF EQ PUSH2 0x97 JUMPI DUP1 PUSH4 0x9201DE55 EQ PUSH2 0xEA JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x95 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH1 0x0 NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x194 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH1 0x0 NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1D0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x119 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH1 0x0 NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x208 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x159 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x13E JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x186 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP1 PUSH1 0x0 NOT AND PUSH1 0x0 DUP1 ADD DUP4 PUSH1 0xA DUP2 LT ISZERO ISZERO PUSH2 0x1AA JUMPI INVALID JUMPDEST ADD SLOAD PUSH1 0x0 NOT AND EQ ISZERO PUSH2 0x1CC JUMPI PUSH1 0x0 PUSH1 0x14 ADD PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 ADD SWAP2 SWAP1 POP SSTORE POP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 ADD DUP4 PUSH1 0xA DUP2 LT ISZERO ISZERO PUSH2 0x1E3 JUMPI INVALID JUMPDEST ADD SLOAD PUSH1 0x0 NOT AND DUP3 PUSH1 0x0 NOT AND EQ ISZERO PUSH2 0x1FD JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x202 JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 PUSH1 0xFF AND LT DUP1 ISZERO PUSH2 0x29E JUMPI POP PUSH1 0x0 PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL DUP5 DUP4 PUSH1 0xFF AND PUSH1 0x20 DUP2 LT ISZERO ISZERO PUSH2 0x256 JUMPI INVALID JUMPDEST BYTE PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x2B0 JUMPI DUP2 DUP1 PUSH1 0x1 ADD SWAP3 POP POP PUSH2 0x213 JUMP JUMPDEST DUP2 PUSH1 0xFF AND PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2E6 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 PUSH1 0xFF AND LT DUP1 ISZERO PUSH2 0x379 JUMPI POP PUSH1 0x0 PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL DUP5 DUP4 PUSH1 0xFF AND PUSH1 0x20 DUP2 LT ISZERO ISZERO PUSH2 0x331 JUMPI INVALID JUMPDEST BYTE PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x400 JUMPI DUP4 DUP3 PUSH1 0xFF AND PUSH1 0x20 DUP2 LT ISZERO ISZERO PUSH2 0x38F JUMPI INVALID JUMPDEST BYTE PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL DUP2 DUP4 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x3C3 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 DUP1 PUSH1 0x1 ADD SWAP3 POP POP PUSH2 0x2EE JUMP JUMPDEST DUP1 SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 PUSH24 0x8FE511E97753F598D516E57C8B45ECC969A58BFD218B32C7 DUP3 0x2e PUSH25 0x8BB6A03002900000000000000000000000000000000000000 ",
							"sourceMap": "28:1304:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:200;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1129:200:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;537:199;;8:9:-1;5:2;;;30:1;27;20:12;5:2;537:199:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;744:377;;8:9:-1;5:2;;;30:1;27;20:12;5:2;744:377:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;744:377:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:200;1223:6;1198:31;;;:7;:16;;1215:3;1198:21;;;;;;;;;;;:31;;;;1194:128;;;1295:7;:13;;;:15;;;;;;;;;;;;;1194:128;1129:200;;:::o;537:199::-;598:4;625:7;:16;;642:1;625:19;;;;;;;;;;;619:25;;;:2;:25;;;;615:114;;;668:4;661:11;;;;615:114;712:5;705:12;;537:199;;;;;:::o;744:377::-;808:6;834:7;930:23;844:1;834:11;;856:64;866:2;862:1;:6;;;:26;;;;;887:1;872:16;;:8;881:1;872:11;;;;;;;;;;;;;;:16;;;;;862:26;856:64;;;905:3;;;;;;;856:64;;;966:1;956:12;;;;;;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;956:12:0;;;;930:38;;988:1;984:5;;979:99;995:2;991:1;:6;;;:26;;;;;1016:1;1001:16;;:8;1010:1;1001:11;;;;;;;;;;;;;;:16;;;;;991:26;979:99;;;1055:8;1064:1;1055:11;;;;;;;;;;;;;;1039:10;1050:1;1039:13;;;;;;;;;;;;;;;;:27;;;;;;;;;;;1019:3;;;;;;;979:99;;;1102:10;1088:25;;744:377;;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "215600",
								"executionCost": "257",
								"totalCost": "215857"
							},
							"external": {
								"bytes32ToString(bytes32)": "infinite",
								"checkSerial(uint256,bytes32)": "631",
								"regWarranty(uint256,bytes32)": "20757"
							},
							"internal": {
								"setProduct(string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 28,
									"end": 1332,
									"name": "PUSH",
									"value": "80"
								},
								{
									"begin": 28,
									"end": 1332,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 28,
									"end": 1332,
									"name": "MSTORE"
								},
								{
									"begin": 28,
									"end": 1332,
									"name": "CALLVALUE"
								},
								{
									"begin": 8,
									"end": 17,
									"name": "DUP1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "ISZERO"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPI"
								},
								{
									"begin": 30,
									"end": 31,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 27,
									"end": 28,
									"name": "DUP1"
								},
								{
									"begin": 20,
									"end": 32,
									"name": "REVERT"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPDEST"
								},
								{
									"begin": 28,
									"end": 1332,
									"name": "POP"
								},
								{
									"begin": 28,
									"end": 1332,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 28,
									"end": 1332,
									"name": "DUP1"
								},
								{
									"begin": 28,
									"end": 1332,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 28,
									"end": 1332,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 28,
									"end": 1332,
									"name": "CODECOPY"
								},
								{
									"begin": 28,
									"end": 1332,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 28,
									"end": 1332,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a165627a7a72305820778fe511e97753f598d516e57c8b45ecc969a58bfd218b32c7822e7808bb6a030029",
									".code": [
										{
											"begin": 28,
											"end": 1332,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "MSTORE"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "LT"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "PUSH [tag]",
											"value": "1"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "JUMPI"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "PUSH",
											"value": "100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "SWAP1"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "DIV"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "AND"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "DUP1"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "PUSH",
											"value": "4716D27A"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "EQ"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "JUMPI"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "DUP1"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "PUSH",
											"value": "60EAF1DF"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "EQ"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "PUSH [tag]",
											"value": "3"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "JUMPI"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "DUP1"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "PUSH",
											"value": "9201DE55"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "EQ"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "PUSH [tag]",
											"value": "4"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "JUMPI"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "tag",
											"value": "1"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "JUMPDEST"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "DUP1"
										},
										{
											"begin": 28,
											"end": 1332,
											"name": "REVERT"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "tag",
											"value": "2"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "JUMPDEST"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "5"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "5"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "POP"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "PUSH [tag]",
											"value": "6"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "DUP1"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "SUB"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "DUP2"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "ADD"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "SWAP1"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "DUP1"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "DUP1"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "SWAP1"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "ADD"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "SWAP1"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "SWAP3"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "SWAP2"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "SWAP1"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "DUP1"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "NOT"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "AND"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "SWAP1"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "ADD"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "SWAP1"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "SWAP3"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "SWAP2"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "SWAP1"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "POP"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "POP"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "POP"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "PUSH [tag]",
											"value": "7"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "JUMP"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "tag",
											"value": "6"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "JUMPDEST"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "STOP"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "tag",
											"value": "3"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "JUMPDEST"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "8"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "8"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "POP"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "PUSH [tag]",
											"value": "9"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "DUP1"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "SUB"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "DUP2"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "ADD"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "SWAP1"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "DUP1"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "DUP1"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "SWAP1"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "ADD"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "SWAP1"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "SWAP3"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "SWAP2"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "SWAP1"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "DUP1"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "NOT"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "AND"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "SWAP1"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "ADD"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "SWAP1"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "SWAP3"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "SWAP2"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "SWAP1"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "POP"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "POP"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "POP"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "PUSH [tag]",
											"value": "10"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "JUMP"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "tag",
											"value": "9"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "JUMPDEST"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "MLOAD"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "DUP1"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "DUP3"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "ISZERO"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "ISZERO"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "ISZERO"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "ISZERO"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "DUP2"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "MSTORE"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "ADD"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "SWAP2"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "POP"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "POP"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "MLOAD"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "DUP1"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "SWAP2"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "SUB"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "SWAP1"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "RETURN"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "tag",
											"value": "4"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "JUMPDEST"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "11"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "11"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "POP"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "PUSH [tag]",
											"value": "12"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "DUP1"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "SUB"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "DUP2"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "ADD"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "SWAP1"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "DUP1"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "DUP1"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "NOT"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "AND"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "SWAP1"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "ADD"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "SWAP1"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "SWAP3"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "SWAP2"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "SWAP1"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "POP"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "POP"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "POP"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "PUSH [tag]",
											"value": "13"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "JUMP"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "tag",
											"value": "12"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "JUMPDEST"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "MLOAD"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "DUP1"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "DUP1"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "ADD"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "DUP3"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "DUP2"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "SUB"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "DUP3"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "MSTORE"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "DUP4"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "DUP2"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "DUP2"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "MLOAD"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "DUP2"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "MSTORE"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "ADD"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "SWAP2"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "POP"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "DUP1"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "MLOAD"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "SWAP1"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "ADD"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "SWAP1"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "DUP1"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "DUP4"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "DUP4"
										},
										{
											"begin": 23,
											"end": 24,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "tag",
											"value": "14"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPDEST"
										},
										{
											"begin": 33,
											"end": 36,
											"name": "DUP4"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "DUP2"
										},
										{
											"begin": 27,
											"end": 37,
											"name": "LT"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "PUSH [tag]",
											"value": "15"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPI"
										},
										{
											"begin": 99,
											"end": 100,
											"name": "DUP1"
										},
										{
											"begin": 94,
											"end": 97,
											"name": "DUP3"
										},
										{
											"begin": 90,
											"end": 101,
											"name": "ADD"
										},
										{
											"begin": 84,
											"end": 102,
											"name": "MLOAD"
										},
										{
											"begin": 80,
											"end": 81,
											"name": "DUP2"
										},
										{
											"begin": 75,
											"end": 78,
											"name": "DUP5"
										},
										{
											"begin": 71,
											"end": 82,
											"name": "ADD"
										},
										{
											"begin": 64,
											"end": 103,
											"name": "MSTORE"
										},
										{
											"begin": 52,
											"end": 54,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 49,
											"end": 50,
											"name": "DUP2"
										},
										{
											"begin": 45,
											"end": 55,
											"name": "ADD"
										},
										{
											"begin": 40,
											"end": 55,
											"name": "SWAP1"
										},
										{
											"begin": 40,
											"end": 55,
											"name": "POP"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "PUSH [tag]",
											"value": "14"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMP"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "tag",
											"value": "15"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPDEST"
										},
										{
											"begin": 12,
											"end": 26,
											"name": "POP"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "POP"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "POP"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "POP"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "SWAP1"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "POP"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "SWAP1"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "DUP2"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "ADD"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "SWAP1"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "AND"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "DUP1"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "ISZERO"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "PUSH [tag]",
											"value": "17"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "JUMPI"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "DUP1"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "DUP3"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "SUB"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "DUP1"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "MLOAD"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "DUP4"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "SUB"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "EXP"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "SUB"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "NOT"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "AND"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "DUP2"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "MSTORE"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "ADD"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "SWAP2"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "POP"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "tag",
											"value": "17"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "JUMPDEST"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "POP"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "SWAP3"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "POP"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "POP"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "POP"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "MLOAD"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "DUP1"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "SWAP2"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "SUB"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "SWAP1"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "RETURN"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "tag",
											"value": "7"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "JUMPDEST"
										},
										{
											"begin": 1223,
											"end": 1229,
											"name": "DUP1"
										},
										{
											"begin": 1198,
											"end": 1229,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1198,
											"end": 1229,
											"name": "NOT"
										},
										{
											"begin": 1198,
											"end": 1229,
											"name": "AND"
										},
										{
											"begin": 1198,
											"end": 1205,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1198,
											"end": 1214,
											"name": "DUP1"
										},
										{
											"begin": 1198,
											"end": 1214,
											"name": "ADD"
										},
										{
											"begin": 1215,
											"end": 1218,
											"name": "DUP4"
										},
										{
											"begin": 1198,
											"end": 1219,
											"name": "PUSH",
											"value": "A"
										},
										{
											"begin": 1198,
											"end": 1219,
											"name": "DUP2"
										},
										{
											"begin": 1198,
											"end": 1219,
											"name": "LT"
										},
										{
											"begin": 1198,
											"end": 1219,
											"name": "ISZERO"
										},
										{
											"begin": 1198,
											"end": 1219,
											"name": "ISZERO"
										},
										{
											"begin": 1198,
											"end": 1219,
											"name": "PUSH [tag]",
											"value": "19"
										},
										{
											"begin": 1198,
											"end": 1219,
											"name": "JUMPI"
										},
										{
											"begin": 1198,
											"end": 1219,
											"name": "INVALID"
										},
										{
											"begin": 1198,
											"end": 1219,
											"name": "tag",
											"value": "19"
										},
										{
											"begin": 1198,
											"end": 1219,
											"name": "JUMPDEST"
										},
										{
											"begin": 1198,
											"end": 1219,
											"name": "ADD"
										},
										{
											"begin": 1198,
											"end": 1219,
											"name": "SLOAD"
										},
										{
											"begin": 1198,
											"end": 1229,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1198,
											"end": 1229,
											"name": "NOT"
										},
										{
											"begin": 1198,
											"end": 1229,
											"name": "AND"
										},
										{
											"begin": 1198,
											"end": 1229,
											"name": "EQ"
										},
										{
											"begin": 1194,
											"end": 1322,
											"name": "ISZERO"
										},
										{
											"begin": 1194,
											"end": 1322,
											"name": "PUSH [tag]",
											"value": "21"
										},
										{
											"begin": 1194,
											"end": 1322,
											"name": "JUMPI"
										},
										{
											"begin": 1295,
											"end": 1302,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1295,
											"end": 1308,
											"name": "PUSH",
											"value": "14"
										},
										{
											"begin": 1295,
											"end": 1308,
											"name": "ADD"
										},
										{
											"begin": 1295,
											"end": 1308,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1295,
											"end": 1310,
											"name": "DUP2"
										},
										{
											"begin": 1295,
											"end": 1310,
											"name": "SLOAD"
										},
										{
											"begin": 1295,
											"end": 1310,
											"name": "DUP1"
										},
										{
											"begin": 1295,
											"end": 1310,
											"name": "SWAP3"
										},
										{
											"begin": 1295,
											"end": 1310,
											"name": "SWAP2"
										},
										{
											"begin": 1295,
											"end": 1310,
											"name": "SWAP1"
										},
										{
											"begin": 1295,
											"end": 1310,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1295,
											"end": 1310,
											"name": "ADD"
										},
										{
											"begin": 1295,
											"end": 1310,
											"name": "SWAP2"
										},
										{
											"begin": 1295,
											"end": 1310,
											"name": "SWAP1"
										},
										{
											"begin": 1295,
											"end": 1310,
											"name": "POP"
										},
										{
											"begin": 1295,
											"end": 1310,
											"name": "SSTORE"
										},
										{
											"begin": 1295,
											"end": 1310,
											"name": "POP"
										},
										{
											"begin": 1194,
											"end": 1322,
											"name": "tag",
											"value": "21"
										},
										{
											"begin": 1194,
											"end": 1322,
											"name": "JUMPDEST"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "POP"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "POP"
										},
										{
											"begin": 1129,
											"end": 1329,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "tag",
											"value": "10"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "JUMPDEST"
										},
										{
											"begin": 598,
											"end": 602,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 625,
											"end": 632,
											"name": "DUP1"
										},
										{
											"begin": 625,
											"end": 641,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 625,
											"end": 641,
											"name": "ADD"
										},
										{
											"begin": 642,
											"end": 643,
											"name": "DUP4"
										},
										{
											"begin": 625,
											"end": 644,
											"name": "PUSH",
											"value": "A"
										},
										{
											"begin": 625,
											"end": 644,
											"name": "DUP2"
										},
										{
											"begin": 625,
											"end": 644,
											"name": "LT"
										},
										{
											"begin": 625,
											"end": 644,
											"name": "ISZERO"
										},
										{
											"begin": 625,
											"end": 644,
											"name": "ISZERO"
										},
										{
											"begin": 625,
											"end": 644,
											"name": "PUSH [tag]",
											"value": "23"
										},
										{
											"begin": 625,
											"end": 644,
											"name": "JUMPI"
										},
										{
											"begin": 625,
											"end": 644,
											"name": "INVALID"
										},
										{
											"begin": 625,
											"end": 644,
											"name": "tag",
											"value": "23"
										},
										{
											"begin": 625,
											"end": 644,
											"name": "JUMPDEST"
										},
										{
											"begin": 625,
											"end": 644,
											"name": "ADD"
										},
										{
											"begin": 625,
											"end": 644,
											"name": "SLOAD"
										},
										{
											"begin": 619,
											"end": 644,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 619,
											"end": 644,
											"name": "NOT"
										},
										{
											"begin": 619,
											"end": 644,
											"name": "AND"
										},
										{
											"begin": 619,
											"end": 621,
											"name": "DUP3"
										},
										{
											"begin": 619,
											"end": 644,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 619,
											"end": 644,
											"name": "NOT"
										},
										{
											"begin": 619,
											"end": 644,
											"name": "AND"
										},
										{
											"begin": 619,
											"end": 644,
											"name": "EQ"
										},
										{
											"begin": 615,
											"end": 729,
											"name": "ISZERO"
										},
										{
											"begin": 615,
											"end": 729,
											"name": "PUSH [tag]",
											"value": "25"
										},
										{
											"begin": 615,
											"end": 729,
											"name": "JUMPI"
										},
										{
											"begin": 668,
											"end": 672,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 661,
											"end": 672,
											"name": "SWAP1"
										},
										{
											"begin": 661,
											"end": 672,
											"name": "POP"
										},
										{
											"begin": 661,
											"end": 672,
											"name": "PUSH [tag]",
											"value": "22"
										},
										{
											"begin": 661,
											"end": 672,
											"name": "JUMP"
										},
										{
											"begin": 615,
											"end": 729,
											"name": "tag",
											"value": "25"
										},
										{
											"begin": 615,
											"end": 729,
											"name": "JUMPDEST"
										},
										{
											"begin": 712,
											"end": 717,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 705,
											"end": 717,
											"name": "SWAP1"
										},
										{
											"begin": 705,
											"end": 717,
											"name": "POP"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "tag",
											"value": "22"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "JUMPDEST"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "SWAP3"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "SWAP2"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "POP"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "POP"
										},
										{
											"begin": 537,
											"end": 736,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "tag",
											"value": "13"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "JUMPDEST"
										},
										{
											"begin": 808,
											"end": 814,
											"name": "PUSH",
											"value": "60"
										},
										{
											"begin": 834,
											"end": 841,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 930,
											"end": 953,
											"name": "PUSH",
											"value": "60"
										},
										{
											"begin": 844,
											"end": 845,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 834,
											"end": 845,
											"name": "SWAP2"
										},
										{
											"begin": 834,
											"end": 845,
											"name": "POP"
										},
										{
											"begin": 856,
											"end": 920,
											"name": "tag",
											"value": "28"
										},
										{
											"begin": 856,
											"end": 920,
											"name": "JUMPDEST"
										},
										{
											"begin": 866,
											"end": 868,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 862,
											"end": 863,
											"name": "DUP3"
										},
										{
											"begin": 862,
											"end": 868,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 862,
											"end": 868,
											"name": "AND"
										},
										{
											"begin": 862,
											"end": 868,
											"name": "LT"
										},
										{
											"begin": 862,
											"end": 888,
											"name": "DUP1"
										},
										{
											"begin": 862,
											"end": 888,
											"name": "ISZERO"
										},
										{
											"begin": 862,
											"end": 888,
											"name": "PUSH [tag]",
											"value": "30"
										},
										{
											"begin": 862,
											"end": 888,
											"name": "JUMPI"
										},
										{
											"begin": 862,
											"end": 888,
											"name": "POP"
										},
										{
											"begin": 887,
											"end": 888,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 872,
											"end": 888,
											"name": "PUSH",
											"value": "100000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 872,
											"end": 888,
											"name": "MUL"
										},
										{
											"begin": 872,
											"end": 880,
											"name": "DUP5"
										},
										{
											"begin": 881,
											"end": 882,
											"name": "DUP4"
										},
										{
											"begin": 872,
											"end": 883,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 872,
											"end": 883,
											"name": "AND"
										},
										{
											"begin": 872,
											"end": 883,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 872,
											"end": 883,
											"name": "DUP2"
										},
										{
											"begin": 872,
											"end": 883,
											"name": "LT"
										},
										{
											"begin": 872,
											"end": 883,
											"name": "ISZERO"
										},
										{
											"begin": 872,
											"end": 883,
											"name": "ISZERO"
										},
										{
											"begin": 872,
											"end": 883,
											"name": "PUSH [tag]",
											"value": "31"
										},
										{
											"begin": 872,
											"end": 883,
											"name": "JUMPI"
										},
										{
											"begin": 872,
											"end": 883,
											"name": "INVALID"
										},
										{
											"begin": 872,
											"end": 883,
											"name": "tag",
											"value": "31"
										},
										{
											"begin": 872,
											"end": 883,
											"name": "JUMPDEST"
										},
										{
											"begin": 872,
											"end": 883,
											"name": "BYTE"
										},
										{
											"begin": 872,
											"end": 883,
											"name": "PUSH",
											"value": "100000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 872,
											"end": 883,
											"name": "MUL"
										},
										{
											"begin": 872,
											"end": 888,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 872,
											"end": 888,
											"name": "NOT"
										},
										{
											"begin": 872,
											"end": 888,
											"name": "AND"
										},
										{
											"begin": 872,
											"end": 888,
											"name": "EQ"
										},
										{
											"begin": 872,
											"end": 888,
											"name": "ISZERO"
										},
										{
											"begin": 862,
											"end": 888,
											"name": "tag",
											"value": "30"
										},
										{
											"begin": 862,
											"end": 888,
											"name": "JUMPDEST"
										},
										{
											"begin": 856,
											"end": 920,
											"name": "ISZERO"
										},
										{
											"begin": 856,
											"end": 920,
											"name": "PUSH [tag]",
											"value": "29"
										},
										{
											"begin": 856,
											"end": 920,
											"name": "JUMPI"
										},
										{
											"begin": 905,
											"end": 908,
											"name": "DUP2"
										},
										{
											"begin": 905,
											"end": 908,
											"name": "DUP1"
										},
										{
											"begin": 905,
											"end": 908,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 905,
											"end": 908,
											"name": "ADD"
										},
										{
											"begin": 905,
											"end": 908,
											"name": "SWAP3"
										},
										{
											"begin": 905,
											"end": 908,
											"name": "POP"
										},
										{
											"begin": 905,
											"end": 908,
											"name": "POP"
										},
										{
											"begin": 856,
											"end": 920,
											"name": "PUSH [tag]",
											"value": "28"
										},
										{
											"begin": 856,
											"end": 920,
											"name": "JUMP"
										},
										{
											"begin": 856,
											"end": 920,
											"name": "tag",
											"value": "29"
										},
										{
											"begin": 856,
											"end": 920,
											"name": "JUMPDEST"
										},
										{
											"begin": 966,
											"end": 967,
											"name": "DUP2"
										},
										{
											"begin": 956,
											"end": 968,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 956,
											"end": 968,
											"name": "AND"
										},
										{
											"begin": 956,
											"end": 968,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 956,
											"end": 968,
											"name": "MLOAD"
										},
										{
											"begin": 956,
											"end": 968,
											"name": "SWAP1"
										},
										{
											"begin": 956,
											"end": 968,
											"name": "DUP1"
										},
										{
											"begin": 956,
											"end": 968,
											"name": "DUP3"
										},
										{
											"begin": 956,
											"end": 968,
											"name": "MSTORE"
										},
										{
											"begin": 956,
											"end": 968,
											"name": "DUP1"
										},
										{
											"begin": 956,
											"end": 968,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 956,
											"end": 968,
											"name": "ADD"
										},
										{
											"begin": 956,
											"end": 968,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 956,
											"end": 968,
											"name": "NOT"
										},
										{
											"begin": 956,
											"end": 968,
											"name": "AND"
										},
										{
											"begin": 956,
											"end": 968,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 956,
											"end": 968,
											"name": "ADD"
										},
										{
											"begin": 956,
											"end": 968,
											"name": "DUP3"
										},
										{
											"begin": 956,
											"end": 968,
											"name": "ADD"
										},
										{
											"begin": 956,
											"end": 968,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 956,
											"end": 968,
											"name": "MSTORE"
										},
										{
											"begin": 956,
											"end": 968,
											"name": "DUP1"
										},
										{
											"begin": 956,
											"end": 968,
											"name": "ISZERO"
										},
										{
											"begin": 956,
											"end": 968,
											"name": "PUSH [tag]",
											"value": "32"
										},
										{
											"begin": 956,
											"end": 968,
											"name": "JUMPI"
										},
										{
											"begin": 956,
											"end": 968,
											"name": "DUP2"
										},
										{
											"begin": 956,
											"end": 968,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 956,
											"end": 968,
											"name": "ADD"
										},
										{
											"begin": 29,
											"end": 31,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 21,
											"end": 27,
											"name": "DUP3"
										},
										{
											"begin": 17,
											"end": 32,
											"name": "MUL"
										},
										{
											"begin": 117,
											"end": 121,
											"name": "DUP1"
										},
										{
											"begin": 105,
											"end": 115,
											"name": "CODESIZE"
										},
										{
											"begin": 97,
											"end": 103,
											"name": "DUP4"
										},
										{
											"begin": 88,
											"end": 122,
											"name": "CODECOPY"
										},
										{
											"begin": 148,
											"end": 152,
											"name": "DUP1"
										},
										{
											"begin": 140,
											"end": 146,
											"name": "DUP3"
										},
										{
											"begin": 136,
											"end": 153,
											"name": "ADD"
										},
										{
											"begin": 126,
											"end": 153,
											"name": "SWAP2"
										},
										{
											"begin": 126,
											"end": 153,
											"name": "POP"
										},
										{
											"begin": 0,
											"end": 157,
											"name": "POP"
										},
										{
											"begin": 956,
											"end": 968,
											"name": "SWAP1"
										},
										{
											"begin": 956,
											"end": 968,
											"name": "POP"
										},
										{
											"begin": 956,
											"end": 968,
											"name": "tag",
											"value": "32"
										},
										{
											"begin": 956,
											"end": 968,
											"name": "JUMPDEST"
										},
										{
											"begin": 956,
											"end": 968,
											"name": "POP"
										},
										{
											"begin": 930,
											"end": 968,
											"name": "SWAP1"
										},
										{
											"begin": 930,
											"end": 968,
											"name": "POP"
										},
										{
											"begin": 988,
											"end": 989,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 984,
											"end": 989,
											"name": "SWAP2"
										},
										{
											"begin": 984,
											"end": 989,
											"name": "POP"
										},
										{
											"begin": 979,
											"end": 1078,
											"name": "tag",
											"value": "33"
										},
										{
											"begin": 979,
											"end": 1078,
											"name": "JUMPDEST"
										},
										{
											"begin": 995,
											"end": 997,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 991,
											"end": 992,
											"name": "DUP3"
										},
										{
											"begin": 991,
											"end": 997,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 991,
											"end": 997,
											"name": "AND"
										},
										{
											"begin": 991,
											"end": 997,
											"name": "LT"
										},
										{
											"begin": 991,
											"end": 1017,
											"name": "DUP1"
										},
										{
											"begin": 991,
											"end": 1017,
											"name": "ISZERO"
										},
										{
											"begin": 991,
											"end": 1017,
											"name": "PUSH [tag]",
											"value": "36"
										},
										{
											"begin": 991,
											"end": 1017,
											"name": "JUMPI"
										},
										{
											"begin": 991,
											"end": 1017,
											"name": "POP"
										},
										{
											"begin": 1016,
											"end": 1017,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1001,
											"end": 1017,
											"name": "PUSH",
											"value": "100000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1001,
											"end": 1017,
											"name": "MUL"
										},
										{
											"begin": 1001,
											"end": 1009,
											"name": "DUP5"
										},
										{
											"begin": 1010,
											"end": 1011,
											"name": "DUP4"
										},
										{
											"begin": 1001,
											"end": 1012,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 1001,
											"end": 1012,
											"name": "AND"
										},
										{
											"begin": 1001,
											"end": 1012,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1001,
											"end": 1012,
											"name": "DUP2"
										},
										{
											"begin": 1001,
											"end": 1012,
											"name": "LT"
										},
										{
											"begin": 1001,
											"end": 1012,
											"name": "ISZERO"
										},
										{
											"begin": 1001,
											"end": 1012,
											"name": "ISZERO"
										},
										{
											"begin": 1001,
											"end": 1012,
											"name": "PUSH [tag]",
											"value": "37"
										},
										{
											"begin": 1001,
											"end": 1012,
											"name": "JUMPI"
										},
										{
											"begin": 1001,
											"end": 1012,
											"name": "INVALID"
										},
										{
											"begin": 1001,
											"end": 1012,
											"name": "tag",
											"value": "37"
										},
										{
											"begin": 1001,
											"end": 1012,
											"name": "JUMPDEST"
										},
										{
											"begin": 1001,
											"end": 1012,
											"name": "BYTE"
										},
										{
											"begin": 1001,
											"end": 1012,
											"name": "PUSH",
											"value": "100000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1001,
											"end": 1012,
											"name": "MUL"
										},
										{
											"begin": 1001,
											"end": 1017,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1001,
											"end": 1017,
											"name": "NOT"
										},
										{
											"begin": 1001,
											"end": 1017,
											"name": "AND"
										},
										{
											"begin": 1001,
											"end": 1017,
											"name": "EQ"
										},
										{
											"begin": 1001,
											"end": 1017,
											"name": "ISZERO"
										},
										{
											"begin": 991,
											"end": 1017,
											"name": "tag",
											"value": "36"
										},
										{
											"begin": 991,
											"end": 1017,
											"name": "JUMPDEST"
										},
										{
											"begin": 979,
											"end": 1078,
											"name": "ISZERO"
										},
										{
											"begin": 979,
											"end": 1078,
											"name": "PUSH [tag]",
											"value": "34"
										},
										{
											"begin": 979,
											"end": 1078,
											"name": "JUMPI"
										},
										{
											"begin": 1055,
											"end": 1063,
											"name": "DUP4"
										},
										{
											"begin": 1064,
											"end": 1065,
											"name": "DUP3"
										},
										{
											"begin": 1055,
											"end": 1066,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 1055,
											"end": 1066,
											"name": "AND"
										},
										{
											"begin": 1055,
											"end": 1066,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1055,
											"end": 1066,
											"name": "DUP2"
										},
										{
											"begin": 1055,
											"end": 1066,
											"name": "LT"
										},
										{
											"begin": 1055,
											"end": 1066,
											"name": "ISZERO"
										},
										{
											"begin": 1055,
											"end": 1066,
											"name": "ISZERO"
										},
										{
											"begin": 1055,
											"end": 1066,
											"name": "PUSH [tag]",
											"value": "38"
										},
										{
											"begin": 1055,
											"end": 1066,
											"name": "JUMPI"
										},
										{
											"begin": 1055,
											"end": 1066,
											"name": "INVALID"
										},
										{
											"begin": 1055,
											"end": 1066,
											"name": "tag",
											"value": "38"
										},
										{
											"begin": 1055,
											"end": 1066,
											"name": "JUMPDEST"
										},
										{
											"begin": 1055,
											"end": 1066,
											"name": "BYTE"
										},
										{
											"begin": 1055,
											"end": 1066,
											"name": "PUSH",
											"value": "100000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1055,
											"end": 1066,
											"name": "MUL"
										},
										{
											"begin": 1039,
											"end": 1049,
											"name": "DUP2"
										},
										{
											"begin": 1050,
											"end": 1051,
											"name": "DUP4"
										},
										{
											"begin": 1039,
											"end": 1052,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 1039,
											"end": 1052,
											"name": "AND"
										},
										{
											"begin": 1039,
											"end": 1052,
											"name": "DUP2"
										},
										{
											"begin": 1039,
											"end": 1052,
											"name": "MLOAD"
										},
										{
											"begin": 1039,
											"end": 1052,
											"name": "DUP2"
										},
										{
											"begin": 1039,
											"end": 1052,
											"name": "LT"
										},
										{
											"begin": 1039,
											"end": 1052,
											"name": "ISZERO"
										},
										{
											"begin": 1039,
											"end": 1052,
											"name": "ISZERO"
										},
										{
											"begin": 1039,
											"end": 1052,
											"name": "PUSH [tag]",
											"value": "39"
										},
										{
											"begin": 1039,
											"end": 1052,
											"name": "JUMPI"
										},
										{
											"begin": 1039,
											"end": 1052,
											"name": "INVALID"
										},
										{
											"begin": 1039,
											"end": 1052,
											"name": "tag",
											"value": "39"
										},
										{
											"begin": 1039,
											"end": 1052,
											"name": "JUMPDEST"
										},
										{
											"begin": 1039,
											"end": 1052,
											"name": "SWAP1"
										},
										{
											"begin": 1039,
											"end": 1052,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1039,
											"end": 1052,
											"name": "ADD"
										},
										{
											"begin": 1039,
											"end": 1052,
											"name": "ADD"
										},
										{
											"begin": 1039,
											"end": 1066,
											"name": "SWAP1"
										},
										{
											"begin": 1039,
											"end": 1066,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1039,
											"end": 1066,
											"name": "NOT"
										},
										{
											"begin": 1039,
											"end": 1066,
											"name": "AND"
										},
										{
											"begin": 1039,
											"end": 1066,
											"name": "SWAP1"
										},
										{
											"begin": 1039,
											"end": 1066,
											"name": "DUP2"
										},
										{
											"begin": 1039,
											"end": 1066,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1039,
											"end": 1066,
											"name": "BYTE"
										},
										{
											"begin": 1039,
											"end": 1066,
											"name": "SWAP1"
										},
										{
											"begin": 1039,
											"end": 1066,
											"name": "MSTORE8"
										},
										{
											"begin": 1039,
											"end": 1066,
											"name": "POP"
										},
										{
											"begin": 1019,
											"end": 1022,
											"name": "DUP2"
										},
										{
											"begin": 1019,
											"end": 1022,
											"name": "DUP1"
										},
										{
											"begin": 1019,
											"end": 1022,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1019,
											"end": 1022,
											"name": "ADD"
										},
										{
											"begin": 1019,
											"end": 1022,
											"name": "SWAP3"
										},
										{
											"begin": 1019,
											"end": 1022,
											"name": "POP"
										},
										{
											"begin": 1019,
											"end": 1022,
											"name": "POP"
										},
										{
											"begin": 979,
											"end": 1078,
											"name": "PUSH [tag]",
											"value": "33"
										},
										{
											"begin": 979,
											"end": 1078,
											"name": "JUMP"
										},
										{
											"begin": 979,
											"end": 1078,
											"name": "tag",
											"value": "34"
										},
										{
											"begin": 979,
											"end": 1078,
											"name": "JUMPDEST"
										},
										{
											"begin": 1102,
											"end": 1112,
											"name": "DUP1"
										},
										{
											"begin": 1088,
											"end": 1113,
											"name": "SWAP3"
										},
										{
											"begin": 1088,
											"end": 1113,
											"name": "POP"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "POP"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "POP"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "SWAP2"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "SWAP1"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "POP"
										},
										{
											"begin": 744,
											"end": 1121,
											"name": "JUMP",
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"bytes32ToString(bytes32)": "9201de55",
							"checkSerial(uint256,bytes32)": "60eaf1df",
							"regWarranty(uint256,bytes32)": "4716d27a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.4.26+commit.4563c3fc\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"Num\",\"type\":\"uint256\"},{\"name\":\"regSer\",\"type\":\"bytes32\"}],\"name\":\"regWarranty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"n\",\"type\":\"uint256\"},{\"name\":\"sn\",\"type\":\"bytes32\"}],\"name\":\"checkSerial\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bytes32\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/Production.sol\":\"Production\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Production.sol\":{\"keccak256\":\"0x5a7da6f4964e6eee6b38e6d02bab48ccc5d168cc5d56b6c221816bb12d52a073\",\"urls\":[\"bzzr://e2c3e48a298e0913e16e3a9bb79c21c545efd9c55dab8b65a0d33c2465ab6b27\"]}},\"version\":1}",
					"userdoc": {
						"methods": {}
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"formattedMessage": "contracts/Production.sol:14:9: Warning: Unused local variable.\n        bytes32 hash = keccak256(abi.encodePacked(a));\r\n        ^----------^\n",
				"message": "Unused local variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 266,
					"file": "contracts/Production.sol",
					"start": 254
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"formattedMessage": "contracts/Production.sol:18:13: Warning: Unused local variable.\n            bytes32 serial = keccak256(abi.encodePacked(product.serialNo[i-1]));\r\n            ^------------^\n",
				"message": "Unused local variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 410,
					"file": "contracts/Production.sol",
					"start": 396
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"formattedMessage": "contracts/Production.sol:13:5: Warning: Function state mutability can be restricted to view\n    function setProduct(string memory a) private {\r\n    ^ (Relevant source part starts here and spans across multiple lines).\n",
				"message": "Function state mutability can be restricted to view",
				"severity": "warning",
				"sourceLocation": {
					"end": 529,
					"file": "contracts/Production.sol",
					"start": 198
				},
				"type": "Warning"
			}
		],
		"sources": {
			"contracts/Production.sol": {
				"ast": {
					"absolutePath": "contracts/Production.sol",
					"exportedSymbols": {
						"Production": [
							163
						]
					},
					"id": 164,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.4",
								".17"
							],
							"nodeType": "PragmaDirective",
							"src": "0:24:0"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 163,
							"linearizedBaseContracts": [
								163
							],
							"name": "Production",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Production.Product",
									"id": 12,
									"members": [
										{
											"constant": false,
											"id": 5,
											"name": "serialNo",
											"nodeType": "VariableDeclaration",
											"scope": 12,
											"src": "84:20:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_bytes32_$10_storage_ptr",
												"typeString": "bytes32[10]"
											},
											"typeName": {
												"baseType": {
													"id": 2,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "84:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 4,
												"length": {
													"argumentTypes": null,
													"hexValue": "3130",
													"id": 3,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "92:2:0",
													"subdenomination": null,
													"typeDescriptions": {
														"typeIdentifier": null,
														"typeString": null
													},
													"value": "10"
												},
												"nodeType": "ArrayTypeName",
												"src": "84:11:0",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$10_storage_ptr",
													"typeString": "bytes32[10]"
												}
											},
											"value": null,
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 9,
											"name": "registered",
											"nodeType": "VariableDeclaration",
											"scope": 12,
											"src": "115:22:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_bytes32_$10_storage_ptr",
												"typeString": "bytes32[10]"
											},
											"typeName": {
												"baseType": {
													"id": 6,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "115:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 8,
												"length": {
													"argumentTypes": null,
													"hexValue": "3130",
													"id": 7,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "123:2:0",
													"subdenomination": null,
													"typeDescriptions": {
														"typeIdentifier": null,
														"typeString": null
													},
													"value": "10"
												},
												"nodeType": "ArrayTypeName",
												"src": "115:11:0",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$10_storage_ptr",
													"typeString": "bytes32[10]"
												}
											},
											"value": null,
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 11,
											"name": "regNo",
											"nodeType": "VariableDeclaration",
											"scope": 12,
											"src": "148:10:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 10,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "148:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"value": null,
											"visibility": "internal"
										}
									],
									"name": "Product",
									"nodeType": "StructDefinition",
									"scope": 163,
									"src": "58:108:0",
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 14,
									"name": "product",
									"nodeType": "VariableDeclaration",
									"scope": 163,
									"src": "174:15:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_struct$_Product_$12_storage",
										"typeString": "struct Production.Product"
									},
									"typeName": {
										"contractScope": null,
										"id": 13,
										"name": "Product",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 12,
										"src": "174:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_Product_$12_storage_ptr",
											"typeString": "struct Production.Product"
										}
									},
									"value": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 54,
										"nodeType": "Block",
										"src": "243:286:0",
										"statements": [
											{
												"assignments": [
													20
												],
												"declarations": [
													{
														"constant": false,
														"id": 20,
														"name": "hash",
														"nodeType": "VariableDeclaration",
														"scope": 55,
														"src": "254:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 19,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "254:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 27,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 24,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 16,
																	"src": "296:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"id": 22,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 165,
																	"src": "279:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 23,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "279:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 25,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "279:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 21,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 172,
														"src": "269:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_sha3_pure$__$returns$_t_bytes32_$",
															"typeString": "function () pure returns (bytes32)"
														}
													},
													"id": 26,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "269:30:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "254:45:0"
											},
											{
												"body": {
													"id": 52,
													"nodeType": "Block",
													"src": "381:141:0",
													"statements": [
														{
															"assignments": [
																39
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 39,
																	"name": "serial",
																	"nodeType": "VariableDeclaration",
																	"scope": 55,
																	"src": "396:14:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 38,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "396:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"value": null,
																	"visibility": "internal"
																}
															],
															"id": 51,
															"initialValue": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"arguments": [
																			{
																				"argumentTypes": null,
																				"baseExpression": {
																					"argumentTypes": null,
																					"expression": {
																						"argumentTypes": null,
																						"id": 43,
																						"name": "product",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 14,
																						"src": "440:7:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Product_$12_storage",
																							"typeString": "struct Production.Product storage ref"
																						}
																					},
																					"id": 44,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "serialNo",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 5,
																					"src": "440:16:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$10_storage",
																						"typeString": "bytes32[10] storage ref"
																					}
																				},
																				"id": 48,
																				"indexExpression": {
																					"argumentTypes": null,
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 47,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"argumentTypes": null,
																						"id": 45,
																						"name": "i",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 29,
																						"src": "457:1:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "-",
																					"rightExpression": {
																						"argumentTypes": null,
																						"hexValue": "31",
																						"id": 46,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "459:1:0",
																						"subdenomination": null,
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"src": "457:3:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "440:21:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			],
																			"expression": {
																				"argumentTypes": null,
																				"id": 41,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 165,
																				"src": "423:3:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 42,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "encodePacked",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": null,
																			"src": "423:16:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function () pure returns (bytes memory)"
																			}
																		},
																		"id": 49,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "423:39:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 40,
																	"name": "keccak256",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 172,
																	"src": "413:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_sha3_pure$__$returns$_t_bytes32_$",
																		"typeString": "function () pure returns (bytes32)"
																	}
																},
																"id": 50,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "413:50:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "396:67:0"
														}
													]
												},
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 34,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 32,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 29,
														"src": "370:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "3130",
														"id": 33,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "372:2:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_10_by_1",
															"typeString": "int_const 10"
														},
														"value": "10"
													},
													"src": "370:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 53,
												"initializationExpression": {
													"assignments": [
														29
													],
													"declarations": [
														{
															"constant": false,
															"id": 29,
															"name": "i",
															"nodeType": "VariableDeclaration",
															"scope": 55,
															"src": "358:6:0",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 28,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "358:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"value": null,
															"visibility": "internal"
														}
													],
													"id": 31,
													"initialValue": {
														"argumentTypes": null,
														"hexValue": "31",
														"id": 30,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "367:1:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "358:10:0"
												},
												"loopExpression": {
													"expression": {
														"argumentTypes": null,
														"id": 36,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "376:3:0",
														"subExpression": {
															"argumentTypes": null,
															"id": 35,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 29,
															"src": "376:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 37,
													"nodeType": "ExpressionStatement",
													"src": "376:3:0"
												},
												"nodeType": "ForStatement",
												"src": "353:169:0"
											}
										]
									},
									"documentation": null,
									"id": 55,
									"implemented": true,
									"isConstructor": false,
									"isDeclaredConst": false,
									"modifiers": [],
									"name": "setProduct",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 17,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 16,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 55,
												"src": "218:15:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 15,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "218:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "217:17:0"
									},
									"payable": false,
									"returnParameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "243:0:0"
									},
									"scope": 163,
									"src": "198:331:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "private"
								},
								{
									"body": {
										"id": 77,
										"nodeType": "Block",
										"src": "604:132:0",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 69,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 64,
														"name": "sn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 59,
														"src": "619:2:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 65,
																"name": "product",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 14,
																"src": "625:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Product_$12_storage",
																	"typeString": "struct Production.Product storage ref"
																}
															},
															"id": 66,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "serialNo",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 5,
															"src": "625:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$10_storage",
																"typeString": "bytes32[10] storage ref"
															}
														},
														"id": 68,
														"indexExpression": {
															"argumentTypes": null,
															"id": 67,
															"name": "n",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 57,
															"src": "642:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "625:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "619:25:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 75,
													"nodeType": "Block",
													"src": "690:39:0",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"hexValue": "66616c7365",
																"id": 73,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "712:5:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"functionReturnParameters": 63,
															"id": 74,
															"nodeType": "Return",
															"src": "705:12:0"
														}
													]
												},
												"id": 76,
												"nodeType": "IfStatement",
												"src": "615:114:0",
												"trueBody": {
													"id": 72,
													"nodeType": "Block",
													"src": "646:38:0",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"hexValue": "74727565",
																"id": 70,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "668:4:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 63,
															"id": 71,
															"nodeType": "Return",
															"src": "661:11:0"
														}
													]
												}
											}
										]
									},
									"documentation": null,
									"id": 78,
									"implemented": true,
									"isConstructor": false,
									"isDeclaredConst": true,
									"modifiers": [],
									"name": "checkSerial",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 57,
												"name": "n",
												"nodeType": "VariableDeclaration",
												"scope": 78,
												"src": "558:6:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 56,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "558:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 59,
												"name": "sn",
												"nodeType": "VariableDeclaration",
												"scope": 78,
												"src": "566:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 58,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "566:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "557:20:0"
									},
									"payable": false,
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 78,
												"src": "598:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 61,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "598:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "597:6:0"
									},
									"scope": 163,
									"src": "537:199:0",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 140,
										"nodeType": "Block",
										"src": "823:298:0",
										"statements": [
											{
												"assignments": [
													86
												],
												"declarations": [
													{
														"constant": false,
														"id": 86,
														"name": "i",
														"nodeType": "VariableDeclaration",
														"scope": 141,
														"src": "834:7:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"typeName": {
															"id": 85,
															"name": "uint8",
															"nodeType": "ElementaryTypeName",
															"src": "834:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 88,
												"initialValue": {
													"argumentTypes": null,
													"hexValue": "30",
													"id": 87,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "844:1:0",
													"subdenomination": null,
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "834:11:0"
											},
											{
												"body": {
													"id": 101,
													"nodeType": "Block",
													"src": "890:30:0",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 99,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "905:3:0",
																"subExpression": {
																	"argumentTypes": null,
																	"id": 98,
																	"name": "i",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 86,
																	"src": "905:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 100,
															"nodeType": "ExpressionStatement",
															"src": "905:3:0"
														}
													]
												},
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 97,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"id": 91,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"id": 89,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 86,
															"src": "862:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"argumentTypes": null,
															"hexValue": "3332",
															"id": 90,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "866:2:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "32"
														},
														"src": "862:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														},
														"id": 96,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"baseExpression": {
																"argumentTypes": null,
																"id": 92,
																"name": "_bytes32",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 80,
																"src": "872:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 94,
															"indexExpression": {
																"argumentTypes": null,
																"id": 93,
																"name": "i",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 86,
																"src": "881:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "872:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes1",
																"typeString": "bytes1"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"argumentTypes": null,
															"hexValue": "30",
															"id": 95,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "887:1:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "872:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "862:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 102,
												"nodeType": "WhileStatement",
												"src": "856:64:0"
											},
											{
												"assignments": [
													104
												],
												"declarations": [
													{
														"constant": false,
														"id": 104,
														"name": "bytesArray",
														"nodeType": "VariableDeclaration",
														"scope": 141,
														"src": "930:23:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 103,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "930:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 109,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 107,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 86,
															"src": "966:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 106,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "956:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 105,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "960:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "956:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "930:38:0"
											},
											{
												"body": {
													"id": 134,
													"nodeType": "Block",
													"src": "1024:54:0",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 132,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"id": 126,
																		"name": "bytesArray",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 104,
																		"src": "1039:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 128,
																	"indexExpression": {
																		"argumentTypes": null,
																		"id": 127,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 86,
																		"src": "1050:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "1039:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"id": 129,
																		"name": "_bytes32",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 80,
																		"src": "1055:8:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"id": 131,
																	"indexExpression": {
																		"argumentTypes": null,
																		"id": 130,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 86,
																		"src": "1064:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1055:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "1039:27:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 133,
															"nodeType": "ExpressionStatement",
															"src": "1039:27:0"
														}
													]
												},
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 122,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"id": 116,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"id": 114,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 86,
															"src": "991:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"argumentTypes": null,
															"hexValue": "3332",
															"id": 115,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "995:2:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "32"
														},
														"src": "991:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														},
														"id": 121,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"baseExpression": {
																"argumentTypes": null,
																"id": 117,
																"name": "_bytes32",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 80,
																"src": "1001:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 119,
															"indexExpression": {
																"argumentTypes": null,
																"id": 118,
																"name": "i",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 86,
																"src": "1010:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "1001:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes1",
																"typeString": "bytes1"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"argumentTypes": null,
															"hexValue": "30",
															"id": 120,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1016:1:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1001:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "991:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 135,
												"initializationExpression": {
													"expression": {
														"argumentTypes": null,
														"id": 112,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"argumentTypes": null,
															"id": 110,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 86,
															"src": "984:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"argumentTypes": null,
															"hexValue": "30",
															"id": 111,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "988:1:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "984:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"id": 113,
													"nodeType": "ExpressionStatement",
													"src": "984:5:0"
												},
												"loopExpression": {
													"expression": {
														"argumentTypes": null,
														"id": 124,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "1019:3:0",
														"subExpression": {
															"argumentTypes": null,
															"id": 123,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 86,
															"src": "1019:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"id": 125,
													"nodeType": "ExpressionStatement",
													"src": "1019:3:0"
												},
												"nodeType": "ForStatement",
												"src": "979:99:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 137,
															"name": "bytesArray",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 104,
															"src": "1102:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 136,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1095:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": "string"
													},
													"id": 138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1095:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 84,
												"id": 139,
												"nodeType": "Return",
												"src": "1088:25:0"
											}
										]
									},
									"documentation": null,
									"id": 141,
									"implemented": true,
									"isConstructor": false,
									"isDeclaredConst": true,
									"modifiers": [],
									"name": "bytes32ToString",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 81,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 80,
												"name": "_bytes32",
												"nodeType": "VariableDeclaration",
												"scope": 141,
												"src": "769:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 79,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "769:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "768:18:0"
									},
									"payable": false,
									"returnParameters": {
										"id": 84,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 83,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 141,
												"src": "808:6:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 82,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "808:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "807:15:0"
									},
									"scope": 163,
									"src": "744:377:0",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 161,
										"nodeType": "Block",
										"src": "1183:146:0",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 153,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 148,
																"name": "product",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 14,
																"src": "1198:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Product_$12_storage",
																	"typeString": "struct Production.Product storage ref"
																}
															},
															"id": 149,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "serialNo",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 5,
															"src": "1198:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$10_storage",
																"typeString": "bytes32[10] storage ref"
															}
														},
														"id": 151,
														"indexExpression": {
															"argumentTypes": null,
															"id": 150,
															"name": "Num",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 143,
															"src": "1215:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "1198:21:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"id": 152,
														"name": "regSer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 145,
														"src": "1223:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "1198:31:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 160,
												"nodeType": "IfStatement",
												"src": "1194:128:0",
												"trueBody": {
													"id": 159,
													"nodeType": "Block",
													"src": "1231:91:0",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 157,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "1295:15:0",
																"subExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 154,
																		"name": "product",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 14,
																		"src": "1295:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Product_$12_storage",
																			"typeString": "struct Production.Product storage ref"
																		}
																	},
																	"id": 156,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "regNo",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 11,
																	"src": "1295:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 158,
															"nodeType": "ExpressionStatement",
															"src": "1295:15:0"
														}
													]
												}
											}
										]
									},
									"documentation": null,
									"id": 162,
									"implemented": true,
									"isConstructor": false,
									"isDeclaredConst": false,
									"modifiers": [],
									"name": "regWarranty",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 143,
												"name": "Num",
												"nodeType": "VariableDeclaration",
												"scope": 162,
												"src": "1150:8:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 142,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1150:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 145,
												"name": "regSer",
												"nodeType": "VariableDeclaration",
												"scope": 162,
												"src": "1160:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 144,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1160:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1149:26:0"
									},
									"payable": false,
									"returnParameters": {
										"id": 147,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1183:0:0"
									},
									"scope": 163,
									"src": "1129:200:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								}
							],
							"scope": 164,
							"src": "28:1304:0"
						}
					],
					"src": "0:1332:0"
				},
				"id": 0
			}
		}
	}
}